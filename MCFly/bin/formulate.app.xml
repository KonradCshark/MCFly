<?xml version="1.0"?>
<doc>
    <assembly>
        <name>formulate.app</name>
    </assembly>
    <members>
        <member name="T:formulate.app.Configuration.FieldCategoryCollection">
            <summary>
            A collection of field categories from the configuration.
            </summary>
        </member>
        <member name="M:formulate.app.Configuration.FieldCategoryCollection.CreateNewElement">
            <summary>
            Creates a new field category element.
            </summary>
            <returns>The field category element.</returns>
        </member>
        <member name="M:formulate.app.Configuration.FieldCategoryCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the key for an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The key.</returns>
        </member>
        <member name="T:formulate.app.Configuration.FieldCategoriesConfigSection">
            <summary>
            A configuration section for field categories.
            </summary>
        </member>
        <member name="P:formulate.app.Configuration.FieldCategoriesConfigSection.Categories">
            <summary>
            The field categories in this configuration section.
            </summary>
        </member>
        <member name="T:formulate.app.Configuration.FieldCategoryElement">
            <summary>
            A "category" configuration element.
            </summary>
        </member>
        <member name="P:formulate.app.Configuration.FieldCategoryElement.Kind">
            <summary>
            The type of the category.
            </summary>
        </member>
        <member name="P:formulate.app.Configuration.FieldCategoryElement.Group">
            <summary>
            The group for the category.
            </summary>
        </member>
        <member name="T:formulate.app.Configuration.FileStorageElement">
            <summary>
            A "fileStorage" configuration element.
            </summary>
        </member>
        <member name="P:formulate.app.Configuration.FileStorageElement.BasePath">
            <summary>
            The base path property of this element.
            </summary>
        </member>
        <member name="T:formulate.app.Configuration.JsonElement">
            <summary>
            A "json" configuration element.
            </summary>
        </member>
        <member name="P:formulate.app.Configuration.JsonElement.BasePath">
            <summary>
            The base path property of this element.
            </summary>
        </member>
        <member name="T:formulate.app.Configuration.SubmissionsConfigSection">
            <summary>
            A configuration section for Formulate submissions.
            </summary>
        </member>
        <member name="P:formulate.app.Configuration.SubmissionsConfigSection.EnableServerSideValidation">
            <summary>
            The property to enable server side validation.
            </summary>
        </member>
        <member name="T:formulate.app.Configuration.EmailCollection">
            <summary>
            A collection of emails from the configuration.
            </summary>
        </member>
        <member name="M:formulate.app.Configuration.EmailCollection.CreateNewElement">
            <summary>
            Creates a new email element.
            </summary>
            <returns>The email element.</returns>
        </member>
        <member name="M:formulate.app.Configuration.EmailCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the key for an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The key.</returns>
        </member>
        <member name="T:formulate.app.Configuration.ButtonCollection">
            <summary>
            A collection of buttons from the configuration.
            </summary>
        </member>
        <member name="M:formulate.app.Configuration.ButtonCollection.CreateNewElement">
            <summary>
            Creates a new button element.
            </summary>
            <returns>The button element.</returns>
        </member>
        <member name="M:formulate.app.Configuration.ButtonCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the key for an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The key.</returns>
        </member>
        <member name="T:formulate.app.Configuration.TemplateCollection">
            <summary>
            A collection of templates from the configuration.
            </summary>
        </member>
        <member name="M:formulate.app.Configuration.TemplateCollection.CreateNewElement">
            <summary>
            Creates a new template element.
            </summary>
            <returns>The template element.</returns>
        </member>
        <member name="M:formulate.app.Configuration.TemplateCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the key for an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The key.</returns>
        </member>
        <member name="T:formulate.app.Configuration.EmailElement">
            <summary>
            A "email" configuration element.
            </summary>
        </member>
        <member name="P:formulate.app.Configuration.EmailElement.Email">
            <summary>
            The email to whitelist.
            </summary>
        </member>
        <member name="P:formulate.app.Configuration.EmailElement.Domain">
            <summary>
            The email domain to whitelist.
            </summary>
        </member>
        <member name="T:formulate.app.Configuration.ButtonElement">
            <summary>
            A "button" configuration element.
            </summary>
        </member>
        <member name="P:formulate.app.Configuration.ButtonElement.Kind">
            <summary>
            The kind of the button.
            </summary>
        </member>
        <member name="T:formulate.app.Configuration.TemplateElement">
            <summary>
            A "template" configuration element.
            </summary>
        </member>
        <member name="P:formulate.app.Configuration.TemplateElement.Name">
            <summary>
            The name of the template.
            </summary>
        </member>
        <member name="P:formulate.app.Configuration.TemplateElement.Path">
            <summary>
            The path to this template.
            </summary>
            <remarks>
            Should start with "~" and end with ".cshtml".
            </remarks>
        </member>
        <member name="P:formulate.app.Configuration.TemplateElement.Id">
            <summary>
            The ID of this template.
            </summary>
        </member>
        <member name="T:formulate.app.Configuration.EmailsConfigSection">
            <summary>
            A configuration section for Formulate emails.
            </summary>
        </member>
        <member name="P:formulate.app.Configuration.EmailsConfigSection.Emails">
            <summary>
            The emails in this configuration section.
            </summary>
        </member>
        <member name="P:formulate.app.Configuration.EmailsConfigSection.Enabled">
            <summary>
            The property to enable the email whitelist.
            </summary>
        </member>
        <member name="T:formulate.app.Configuration.ButtonsConfigSection">
            <summary>
            A configuration section for Formulate buttons.
            </summary>
        </member>
        <member name="P:formulate.app.Configuration.ButtonsConfigSection.Buttons">
            <summary>
            The buttons in this configuration section.
            </summary>
        </member>
        <member name="T:formulate.app.Configuration.TemplatesConfigSection">
            <summary>
            A configuration section for Formulate templates.
            </summary>
        </member>
        <member name="P:formulate.app.Configuration.TemplatesConfigSection.Templates">
            <summary>
            The templates in this configuration section.
            </summary>
        </member>
        <member name="T:formulate.app.Configuration.PersistenceConfigSection">
            <summary>
            A configuration section for Formulate persistence.
            </summary>
        </member>
        <member name="P:formulate.app.Configuration.PersistenceConfigSection.Json">
            <summary>
            The "json" element in this section.
            </summary>
        </member>
        <member name="P:formulate.app.Configuration.PersistenceConfigSection.FileStorage">
            <summary>
            The "fileStorage" element in this section.
            </summary>
        </member>
        <member name="T:formulate.app.Controllers.ConfiguredFormsContentController">
            <summary>
            Controller for Formulate configured forms. This variation can be used in the content
            section (e.g., for the form picker).
            </summary>
        </member>
        <member name="M:formulate.app.Controllers.ConfiguredFormsContentController.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:formulate.app.Controllers.ConfiguredFormsContentController.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            Primary constructor.
            </summary>
            <param name="context">Umbraco context.</param>
        </member>
        <member name="M:formulate.app.Controllers.ConfiguredFormsContentController.GetConfiguredFormInfo(formulate.app.Models.Requests.GetConfiguredFormInfoRequest)">
            <summary>
            Returns info about the configured form with the specified ID.
            </summary>
            <param name="request">
            The request to get the configured form info.
            </param>
            <returns>
            An object indicating success or failure, along with some
            accompanying data.
            </returns>
        </member>
        <member name="T:formulate.app.Controllers.DataValuesController">
            <summary>
            Controller for Formulate data values.
            </summary>
        </member>
        <member name="M:formulate.app.Controllers.DataValuesController.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:formulate.app.Controllers.DataValuesController.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            Primary constructor.
            </summary>
            <param name="context">Umbraco context.</param>
        </member>
        <member name="M:formulate.app.Controllers.DataValuesController.PersistDataValue(formulate.app.Models.Requests.PersistDataValueRequest)">
            <summary>
            Creates a data value.
            </summary>
            <param name="request">
            The request to create the data value.
            </param>
            <returns>
            An object indicating success or failure, along with some
            accompanying data.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.DataValuesController.GetDataValueInfo(formulate.app.Models.Requests.GetDataValueInfoRequest)">
            <summary>
            Returns info about the data value with the specified ID.
            </summary>
            <param name="request">
            The request to get the data value info.
            </param>
            <returns>
            An object indicating success or failure, along with some
            accompanying data.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.DataValuesController.GetDataValuesInfo(formulate.app.Models.Requests.GetDataValuesInfoRequest)">
            <summary>
            Returns info about the data values with the specified ID's.
            </summary>
            <param name="request">
            The request to get the data values info.
            </param>
            <returns>
            An object indicating success or failure, along with some
            accompanying data.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.DataValuesController.DeleteDataValue(formulate.app.Models.Requests.DeleteDataValueRequest)">
            <summary>
            Deletes the data value with the specified ID.
            </summary>
            <param name="request">
            The request to delete the data value.
            </param>
            <returns>
            An object indicating success or failure, along with some
            accompanying data.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.DataValuesController.GetDataValueKinds">
            <summary>
            Returns the data value kinds.
            </summary>
            <returns>
            An object indicating success or failure, along with information
            about data value kinds.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.DataValuesController.GetDataValueSuppliers">
            <summary>
            Returns the data value suppliers.
            </summary>
            <returns>
            An object indicating success or failure, along with information
            about data value suppliers.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.DataValuesController.MoveDataValue(formulate.app.Models.Requests.MoveDataValueRequest)">
            <summary>
            Moves data value to a new parent.
            </summary>
            <param name="request">
            The request to move the data value.
            </param>
            <returns>
            An object indicating success or failure, along with information
            about the data value.
            </returns>
        </member>
        <member name="T:formulate.app.Controllers.EntitiesContentController">
            <summary>
            Controller for Formulate entities. This variation can be used in the content
            section (e.g., for the form picker).
            </summary>
        </member>
        <member name="M:formulate.app.Controllers.EntitiesContentController.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:formulate.app.Controllers.EntitiesContentController.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            Primary constructor.
            </summary>
            <param name="context">Umbraco context.</param>
        </member>
        <member name="M:formulate.app.Controllers.EntitiesContentController.GetEntityChildren(formulate.app.Models.Requests.GetEntityChildrenRequest)">
            <summary>
            Returns the children of the specified entity.
            </summary>
            <param name="request">
            The request to get the children.
            </param>
            <returns>
            An object indicating success or failure, along with some
            accompanying data.
            </returns>
        </member>
        <member name="T:formulate.app.Controllers.HandlersController">
            <summary>
            Controller for Formulate form submission handlers.
            </summary>
        </member>
        <member name="M:formulate.app.Controllers.HandlersController.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:formulate.app.Controllers.HandlersController.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            Primary constructor.
            </summary>
            <param name="context">Umbraco context.</param>
        </member>
        <member name="M:formulate.app.Controllers.HandlersController.GetHandlerTypes">
            <summary>
            Returns the handler types.
            </summary>
            <returns>
            An object indicating success or failure, along with information
            about handler types.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.HandlersController.GetResultHandlers">
            <summary>
            Returns the result handler functions.
            </summary>
            <returns>
            An object indicating success or failure, along with information about result
            handler functions.
            </returns>
        </member>
        <member name="T:formulate.app.Controllers.FieldsController">
            <summary>
            Controller for Formulate fields.
            </summary>
        </member>
        <member name="P:formulate.app.Controllers.FieldsController.Config">
            <summary>
            Configuration manager.
            </summary>
        </member>
        <member name="M:formulate.app.Controllers.FieldsController.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:formulate.app.Controllers.FieldsController.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            Primary constructor.
            </summary>
            <param name="context">Umbraco context.</param>
        </member>
        <member name="M:formulate.app.Controllers.FieldsController.GetFieldTypes">
            <summary>
            Returns the field types.
            </summary>
            <returns>
            An object indicating success or failure, along with information
            about field types.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.FieldsController.GetButtonKinds">
            <summary>
            Returns the kinds of buttons that can be selected when creating a button in the form designer.
            </summary>
            <returns>
            The button kinds.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.FieldsController.GetFieldCategories">
            <summary>
            Returns the categories of fields that can be selected when adding a field in the form designer.
            </summary>
            <returns>
            The field categories.
            </returns>
        </member>
        <member name="T:formulate.app.Controllers.FoldersController">
            <summary>
            Controller for Formulate forms.
            </summary>
        </member>
        <member name="M:formulate.app.Controllers.FoldersController.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:formulate.app.Controllers.FoldersController.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            Primary constructor.
            </summary>
            <param name="context">Umbraco context.</param>
        </member>
        <member name="M:formulate.app.Controllers.FoldersController.GetFolderInfo(formulate.app.Models.Requests.GetFolderInfoRequest)">
            <summary>
            Returns info about the folder with the specified ID.
            </summary>
            <param name="request">
            The request to get the folder info.
            </param>
            <returns>
            An object indicating success or failure, along with some
            accompanying data.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.FoldersController.PersistFolder(formulate.app.Models.Requests.PersistFolderRequest)">
            <summary>
            Persists a folder.
            </summary>
            <param name="request">
            The request to persist a folder.
            </param>
            <returns>
            An object indicating success or failure, along with some
            folder data.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.FoldersController.MoveFolder(formulate.app.Models.Requests.MoveFolderRequest)">
            <summary>
            Moves folder to a new parent.
            </summary>
            <param name="request">
            The request to move the folder.
            </param>
            <returns>
            An object indicating success or failure, along with information
            about the folder.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.FoldersController.DeleteFolder(formulate.app.Models.Requests.DeleteFolderRequest)">
            <summary>
            Deletes the foldfer with the specified ID.
            </summary>
            <param name="request">
            The request to delete the folder.
            </param>
            <returns>
            An object indicating success or failure, along with some
            accompanying data.
            </returns>
        </member>
        <member name="T:formulate.app.Controllers.EntitiesController">
            <summary>
            Controller for Formulate entities.
            </summary>
        </member>
        <member name="M:formulate.app.Controllers.EntitiesController.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:formulate.app.Controllers.EntitiesController.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            Primary constructor.
            </summary>
            <param name="context">Umbraco context.</param>
        </member>
        <member name="M:formulate.app.Controllers.EntitiesController.GetEntity(formulate.app.Models.Requests.GetEntityRequest)">
            <summary>
            Returns the form info for the specified entity.
            </summary>
            <param name="request">
            The request to get the entity info.
            </param>
            <returns>
            An object indicating success or failure, along with some
            accompanying data.
            </returns>
        </member>
        <member name="T:formulate.app.Controllers.FormsController">
            <summary>
            Controller for Formulate forms.
            </summary>
        </member>
        <member name="P:formulate.app.Controllers.FormsController.Config">
            <summary>
            Configuration manager.
            </summary>
        </member>
        <member name="M:formulate.app.Controllers.FormsController.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:formulate.app.Controllers.FormsController.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            Primary constructor.
            </summary>
            <param name="context">Umbraco context.</param>
        </member>
        <member name="M:formulate.app.Controllers.FormsController.GetFormInfo(formulate.app.Models.Requests.GetFormInfoRequest)">
            <summary>
            Returns the form info for the specified form.
            </summary>
            <param name="request">
            The request to get the form info.
            </param>
            <returns>
            An object indicating success or failure, along with some
            accompanying data.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.FormsController.PersistForm(formulate.app.Models.Requests.PersistFormRequest)">
            <summary>
            Persists a form.
            </summary>
            <param name="request">
            The request to persist a form.
            </param>
            <returns>
            An object indicating success or failure, along with the
            form ID.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.FormsController.DeleteForm(formulate.app.Models.Requests.DeleteFormRequest)">
            <summary>
            Deletes the form with the specified ID.
            </summary>
            <param name="request">
            The request to delete the form.
            </param>
            <returns>
            An object indicating success or failure, along with some
            accompanying data.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.FormsController.MoveForm(formulate.app.Models.Requests.MoveFormRequest)">
            <summary>
            Moves form to a new parent.
            </summary>
            <param name="request">
            The request to move the form.
            </param>
            <returns>
            An object indicating success or failure, along with information
            about the form.
            </returns>
        </member>
        <member name="T:formulate.app.Controllers.ConfiguredFormsController">
            <summary>
            Controller for Formulate configured forms.
            </summary>
        </member>
        <member name="M:formulate.app.Controllers.ConfiguredFormsController.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:formulate.app.Controllers.ConfiguredFormsController.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            Primary constructor.
            </summary>
            <param name="context">Umbraco context.</param>
        </member>
        <member name="M:formulate.app.Controllers.ConfiguredFormsController.PersistConfiguredForm(formulate.app.Models.Requests.PersistConfiguredFormRequest)">
            <summary>
            Creates a configured form.
            </summary>
            <param name="request">
            The request to create the configured form.
            </param>
            <returns>
            An object indicating success or failure, along with some
            accompanying data.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.ConfiguredFormsController.DeleteConfiguredForm(formulate.app.Models.Requests.DeleteConfiguredFormRequest)">
            <summary>
            Deletes the configured form with the specified ID.
            </summary>
            <param name="request">
            The request to delete the configured form.
            </param>
            <returns>
            An object indicating success or failure, along with some
            accompanying data.
            </returns>
        </member>
        <member name="T:formulate.app.Controllers.ServerConfigurationController">
            <summary>
            Controller for working with server configuration.
            </summary>
        </member>
        <member name="M:formulate.app.Controllers.ServerConfigurationController.HasConfiguredRecaptcha">
            <summary>
            Returns a value indicating whether or not the server has been configured for Recaptcha.
            </summary>
            <returns>
            True, if the server has been configured for Recaptcha; otherwise, false.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.ServerConfigurationController.HasEnableJSONFormLogging">
            <summary>
            Returns a value indicating whether or not the server has been configured for logging form JSON output.
            </summary>
            <returns>
            True, if the server has been configured for logging JSON; otherwise, false.
            </returns>
        </member>
        <member name="T:formulate.app.Controllers.StoredDataController">
            <summary>
            Controller for stored data from form submissions.
            </summary>
        </member>
        <member name="P:formulate.app.Controllers.StoredDataController.Config">
            <summary>
            Configuration manager.
            </summary>
        </member>
        <member name="P:formulate.app.Controllers.StoredDataController.Forms">
            <summary>
            Form persistence.
            </summary>
        </member>
        <member name="M:formulate.app.Controllers.StoredDataController.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:formulate.app.Controllers.StoredDataController.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            Primary constructor.
            </summary>
            <param name="context">Umbraco context.</param>
        </member>
        <member name="M:formulate.app.Controllers.StoredDataController.GetSubmissions(formulate.app.Models.Requests.GetStoredDataRequest)">
            <summary>
            Gets form submissions based on the specified constraints.
            </summary>
            <param name="request">
            The constraints.
            </param>
            <returns>
            The form submissions.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.StoredDataController.GetDataForFields(System.String,System.Collections.Generic.Dictionary{System.Guid,formulate.app.Forms.IFormField},formulate.app.Forms.Form)">
            <summary>
            Returns the anonymous object array for the specified form fields.
            </summary>
            <param name="strJson">
            The serialized form fields.
            </param>
            <param name="fieldsById">
            The form field information, stored in a dictionary by field ID.
            </param>
            <param name="form">
            The form the fields relate to.
            </param>
            <returns>
            The anonymous object array containing field information.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.StoredDataController.GetDataForFiles(System.String,System.Collections.Generic.Dictionary{System.Guid,formulate.app.Forms.IFormField},formulate.app.Forms.Form)">
            <summary>
            Returns the anonymous object array for the specified form file fields.
            </summary>
            <param name="strJson">
            The serialized form file fields.
            </param>
            <param name="fieldsById">
            The form field information, stored in a dictionary by field ID.
            </param>
            <param name="form">
            The form the file fields relate to.
            </param>
            <returns>
            The anonymous object array containing file field information.
            </returns>
        </member>
        <member name="T:formulate.app.Controllers.StoredDataDownloadController">
            <summary>
            Controller for downloading stored file data.
            </summary>
        </member>
        <member name="P:formulate.app.Controllers.StoredDataDownloadController.Config">
            <summary>
            Configuration manager.
            </summary>
        </member>
        <member name="P:formulate.app.Controllers.StoredDataDownloadController.Persistence">
            <summary>
            Form persistence.
            </summary>
        </member>
        <member name="M:formulate.app.Controllers.StoredDataDownloadController.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:formulate.app.Controllers.StoredDataDownloadController.DownloadFile(formulate.app.Models.Requests.GetFileDownloadRequest)">
            <summary>
            Returns a file download.
            </summary>
            <param name="request">
            The request for the file to download.
            </param>
            <returns>
            The file download.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.StoredDataDownloadController.DownloadCsvExport(formulate.app.Models.Requests.GetCsvExportRequest)">
            <summary>
            Returns a CSV export.
            </summary>
            <param name="request">
            The request for the CSV export.
            </param>
            <returns>
            The file download.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.StoredDataDownloadController.GenerateCsvOfFormSubmissions(formulate.app.Forms.Form)">
            <summary>
            Generates a CSV of the form submissions for the specified form.
            </summary>
            <param name="form">
            The form to generate the CSV for.
            </param>
            <returns>
            The CSV.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.StoredDataDownloadController.SanitizeFilename(System.String)">
            <summary>
            Sanitizes a source string for use as a filename.
            </summary>
            <param name="source">
            The source string to sanitize.
            </param>
            <returns>
            The sanitized string.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.StoredDataDownloadController.GetValuesForFields(System.String)">
            <summary>
            Extracts fields values from the serialized form fields.
            </summary>
            <param name="strJson">
            The serialized form fields.
            </param>
            <returns>
            Field values, stored by field ID.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.StoredDataDownloadController.GetValuesForFiles(System.String)">
            <summary>
            Extracts filenames from the serialized form fields.
            </summary>
            <param name="strJson">
            The serialized form fields.
            </param>
            <returns>
            Filenames, stored by field ID.
            </returns>
        </member>
        <member name="T:formulate.app.Controllers.TemplatesController">
            <summary>
            Controller for Formulate templates.
            </summary>
        </member>
        <member name="P:formulate.app.Controllers.TemplatesController.Config">
            <summary>
            Configuration manager.
            </summary>
        </member>
        <member name="M:formulate.app.Controllers.TemplatesController.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:formulate.app.Controllers.TemplatesController.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            Primary constructor.
            </summary>
            <param name="context">Umbraco context.</param>
        </member>
        <member name="M:formulate.app.Controllers.TemplatesController.GetTemplates">
            <summary>
            Returns the templates.
            </summary>
            <returns>
            An object indicating success or failure, along with
            information about templates.
            </returns>
        </member>
        <member name="T:formulate.app.Controllers.ValidationsController">
            <summary>
            Controller for Formulate validations.
            </summary>
        </member>
        <member name="M:formulate.app.Controllers.ValidationsController.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:formulate.app.Controllers.ValidationsController.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            Primary constructor.
            </summary>
            <param name="context">Umbraco context.</param>
        </member>
        <member name="M:formulate.app.Controllers.ValidationsController.PersistValidation(formulate.app.Models.Requests.PersistValidationRequest)">
            <summary>
            Creates a validation.
            </summary>
            <param name="request">
            The request to create the validation.
            </param>
            <returns>
            An object indicating success or failure, along with some
            accompanying data.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.ValidationsController.GetValidationInfo(formulate.app.Models.Requests.GetValidationInfoRequest)">
            <summary>
            Returns info about the validation with the specified ID.
            </summary>
            <param name="request">
            The request to get the validation info.
            </param>
            <returns>
            An object indicating success or failure, along with some
            accompanying data.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.ValidationsController.GetValidationsInfo(formulate.app.Models.Requests.GetValidationsInfoRequest)">
            <summary>
            Returns info about the validations with the specified IDs.
            </summary>
            <param name="request">
            The request to get the info on the validations.
            </param>
            <returns>
            An object indicating success or failure, along with some
            accompanying data.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.ValidationsController.DeleteValidation(formulate.app.Models.Requests.DeleteValidationRequest)">
            <summary>
            Deletes the validation with the specified ID.
            </summary>
            <param name="request">
            The request to delete the validation.
            </param>
            <returns>
            An object indicating success or failure, along with some
            accompanying data.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.ValidationsController.GetValidationKinds">
            <summary>
            Returns the validation kinds.
            </summary>
            <returns>
            An object indicating success or failure, along with information
            about validation kinds.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.ValidationsController.MoveValidation(formulate.app.Models.Requests.MoveValidationRequest)">
            <summary>
            Moves validation to a new parent.
            </summary>
            <param name="request">
            The request to move the validation.
            </param>
            <returns>
            An object indicating success or failure, along with information
            about the validation.
            </returns>
        </member>
        <member name="T:formulate.app.Controllers.LayoutsController">
            <summary>
            Controller for Formulate layouts.
            </summary>
        </member>
        <member name="M:formulate.app.Controllers.LayoutsController.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:formulate.app.Controllers.LayoutsController.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            Primary constructor.
            </summary>
            <param name="context">Umbraco context.</param>
        </member>
        <member name="M:formulate.app.Controllers.LayoutsController.PersistLayout(formulate.app.Models.Requests.PersistLayoutRequest)">
            <summary>
            Creates a layout.
            </summary>
            <param name="request">
            The request to create the layout.
            </param>
            <returns>
            An object indicating success or failure, along with some
            accompanying data.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.LayoutsController.GetLayoutInfo(formulate.app.Models.Requests.GetLayoutInfoRequest)">
            <summary>
            Returns info about the layout with the specified ID.
            </summary>
            <param name="request">
            The request to get the layout info.
            </param>
            <returns>
            An object indicating success or failure, along with some
            accompanying data.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.LayoutsController.DeleteLayout(formulate.app.Models.Requests.DeleteLayoutRequest)">
            <summary>
            Deletes the layout with the specified ID.
            </summary>
            <param name="request">
            The request to delete the layout.
            </param>
            <returns>
            An object indicating success or failure, along with some
            accompanying data.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.LayoutsController.GetLayoutKinds">
            <summary>
            Returns the layout kinds.
            </summary>
            <returns>
            An object indicating success or failure, along with
            information about layout kinds.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.LayoutsController.MoveLayout(formulate.app.Models.Requests.MoveLayoutRequest)">
            <summary>
            Moves layout to a new parent.
            </summary>
            <param name="request">
            The request to move the layout.
            </param>
            <returns>
            An object indicating success or failure, along with information
            about the layout.
            </returns>
        </member>
        <member name="M:formulate.app.Controllers.LayoutsController.GetAllLayoutKinds">
            <summary>
            Returns the layout kinds.
            </summary>
        </member>
        <member name="T:formulate.app.Controllers.SetupController">
            <summary>
            Controller that handles operations related to setup of
            Formulate.
            </summary>
        </member>
        <member name="M:formulate.app.Controllers.SetupController.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:formulate.app.Controllers.SetupController.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            Primary constructor.
            </summary>
        </member>
        <member name="M:formulate.app.Controllers.SetupController.PermitAccessToFormulate">
            <summary>
            Gives the current user permission to access the
            "Formulate" section in Umbraco.
            </summary>
            <returns>
            An object indicating whether or not the operation
            was sucessful.
            </returns>
        </member>
        <member name="T:formulate.app.Converters.ConfiguredFormConverter">
            <summary>
            Converts property values to ConfiguredFormInfo.
            </summary>
        </member>
        <member name="M:formulate.app.Converters.ConfiguredFormConverter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:formulate.app.Converters.ConfiguredFormConverter.IsConverter(Umbraco.Core.Models.PublishedContent.PublishedPropertyType)">
            <summary>
            Indicates whether or not this is a converter for the specified property type.
            </summary>
            <param name="propertyType">
            The property type.
            </param>
            <returns>
            True, if this can convert the property type; otherwise, false.
            </returns>
        </member>
        <member name="M:formulate.app.Converters.ConfiguredFormConverter.ConvertDataToSource(Umbraco.Core.Models.PublishedContent.PublishedPropertyType,System.Object,System.Boolean)">
            <summary>
            Converts the raw property data to ConfiguredFormInfo.
            </summary>
            <param name="propertyType">
            The property type.
            </param>
            <param name="source">
            The property data.
            </param>
            <param name="preview">
            Is this preview data?
            </param>
            <returns>
            The ConfiguredFormInfo.
            </returns>
        </member>
        <member name="T:formulate.app.DataValues.DataInterfaces.IGetValueAndLabelCollection">
            <summary>
            Any data values implementing this interface can return a collection of value and label items.
            </summary>
        </member>
        <member name="T:formulate.app.DataValues.DataInterfaces.IGetStringCollection">
            <summary>
            Any data values implementing this interface can return a collection of strings.
            </summary>
        </member>
        <member name="T:formulate.app.DataValues.DataValue">
            <summary>
            A data value for use by a form (typically a form field).
            </summary>
        </member>
        <member name="P:formulate.app.DataValues.DataValue.KindId">
            <summary>
            The ID of the type of data value.
            </summary>
        </member>
        <member name="P:formulate.app.DataValues.DataValue.Id">
            <summary>
            The unique ID of this data value.
            </summary>
        </member>
        <member name="P:formulate.app.DataValues.DataValue.Path">
            <summary>
            The entity path to this data value.
            </summary>
            <remarks>
            This path excludes the root, but includes the data value ID.
            </remarks>
        </member>
        <member name="P:formulate.app.DataValues.DataValue.Alias">
            <summary>
            The alias of this data value.
            </summary>
        </member>
        <member name="P:formulate.app.DataValues.DataValue.Name">
            <summary>
            The name of this data value.
            </summary>
        </member>
        <member name="P:formulate.app.DataValues.DataValue.Icon">
            <summary>
            The icon for data values.
            </summary>
        </member>
        <member name="P:formulate.app.DataValues.DataValue.Kind">
            <summary>
            The kind of this entity.
            </summary>
        </member>
        <member name="P:formulate.app.DataValues.DataValue.Data">
            <summary>
            The data stored by this data value.
            </summary>
        </member>
        <member name="M:formulate.app.DataValues.DataValue.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:formulate.app.DataValues.IDataValueKind">
            <summary>
            Classes that implement this are the kinds of data values that
            can be created.
            </summary>
        </member>
        <member name="T:formulate.app.DataValues.Kinds.DataValueListFunction">
            <summary>
            A data value kind that calls other functions that supply a list of data.
            </summary>
        </member>
        <member name="P:formulate.app.DataValues.Kinds.DataValueListFunction.Id">
            <summary>
            The kind ID.
            </summary>
        </member>
        <member name="P:formulate.app.DataValues.Kinds.DataValueListFunction.Name">
            <summary>
            The kind name.
            </summary>
        </member>
        <member name="P:formulate.app.DataValues.Kinds.DataValueListFunction.Directive">
            <summary>
            The kind directive.
            </summary>
        </member>
        <member name="M:formulate.app.DataValues.Kinds.DataValueListFunction.GetValues(System.String)">
            <summary>
            Extracts the value and label collection from the specified raw data.
            </summary>
            <param name="rawData">
            The raw data for the list.
            </param>
            <returns>
            The collection of value and label items.
            </returns>
        </member>
        <member name="T:formulate.app.DataValues.Kinds.DataValueList">
            <summary>
            A data value kind that stores a list of strings.
            </summary>
        </member>
        <member name="P:formulate.app.DataValues.Kinds.DataValueList.Id">
            <summary>
            The kind ID.
            </summary>
        </member>
        <member name="P:formulate.app.DataValues.Kinds.DataValueList.Name">
            <summary>
            The kind name.
            </summary>
        </member>
        <member name="P:formulate.app.DataValues.Kinds.DataValueList.Directive">
            <summary>
            The kind directive.
            </summary>
        </member>
        <member name="M:formulate.app.DataValues.Kinds.DataValueList.formulate#app#DataValues#DataInterfaces#IGetStringCollection#GetValues(System.String)">
            <summary>
            Extracts the string collection from the specified raw data.
            </summary>
            <param name="rawData">
            The raw data for the list.
            </param>
            <returns>
            The collection of strings.
            </returns>
        </member>
        <member name="M:formulate.app.DataValues.Kinds.DataValueList.formulate#app#DataValues#DataInterfaces#IGetValueAndLabelCollection#GetValues(System.String)">
            <summary>
            Extracts the value and label collection from the specified raw data.
            </summary>
            <param name="rawData">
            The raw data for the list.
            </param>
            <returns>
            The collection of value and label items.
            </returns>
        </member>
        <member name="T:formulate.app.DataValues.Kinds.DataValuePairList">
            <summary>
            A data value kind that stores a list of string pairs.
            </summary>
        </member>
        <member name="M:formulate.app.DataValues.Kinds.DataValuePairList.formulate#app#DataValues#DataInterfaces#IGetStringCollection#GetValues(System.String)">
            <summary>
            Extracts the string collection from the specified raw data.
            </summary>
            <param name="rawData">
            The raw data for the list.
            </param>
            <returns>
            The collection of strings.
            </returns>
        </member>
        <member name="M:formulate.app.DataValues.Kinds.DataValuePairList.formulate#app#DataValues#DataInterfaces#IGetValueAndLabelCollection#GetValues(System.String)">
            <summary>
            Extracts the value and label collection from the specified raw data.
            </summary>
            <param name="rawData">
            The raw data for the list.
            </param>
            <returns>
            The collection of value and label items.
            </returns>
        </member>
        <member name="T:formulate.app.DataValues.Suppliers.ISupplyValueAndLabelCollection">
            <summary>
            Any classes implementing this interface can return a collection of value and label items.
            </summary>
        </member>
        <member name="P:formulate.app.DataValues.Suppliers.ISupplyValueAndLabelCollection.Name">
            <summary>
            The name of this supplier (to be displayed when selecting suppliers in the back office.
            </summary>
        </member>
        <member name="M:formulate.app.DataValues.Suppliers.ISupplyValueAndLabelCollection.GetValues">
            <summary>
            Returns the values for this supplier.
            </summary>
            <returns>
            The values.
            </returns>
        </member>
        <member name="T:formulate.app.DataValues.Suppliers.Kinds.UsStateSupplier">
            <summary>
            Supplies a list of US states.
            </summary>
        </member>
        <member name="P:formulate.app.DataValues.Suppliers.Kinds.UsStateSupplier.Name">
            <summary>
            The name of this supplier.
            </summary>
        </member>
        <member name="P:formulate.app.DataValues.Suppliers.Kinds.UsStateSupplier.AllStates">
            <summary>
            The US states.
            </summary>
        </member>
        <member name="M:formulate.app.DataValues.Suppliers.Kinds.UsStateSupplier.GetValues">
            <summary>
            Returns the states.
            </summary>
            <returns>
            The US states.
            </returns>
        </member>
        <member name="T:formulate.app.Entities.EntityKind">
            <summary>
            The kind of formulate entity.
            </summary>
        </member>
        <member name="T:formulate.app.Entities.EntityRoot">
            <summary>
            A root-level entity (e.g., "Forms", "Layouts").
            </summary>
        </member>
        <member name="P:formulate.app.Entities.EntityRoot.Id">
            <summary>
            The unique ID of this entity.
            </summary>
        </member>
        <member name="P:formulate.app.Entities.EntityRoot.Path">
            <summary>
            The entity path to this entity.
            </summary>
            <remarks>
            This path will only contain one item (the ID of this entity).
            </remarks>
        </member>
        <member name="P:formulate.app.Entities.EntityRoot.Name">
            <summary>
            The name of this entity.
            </summary>
        </member>
        <member name="P:formulate.app.Entities.EntityRoot.Icon">
            <summary>
            The icon for this root entity.
            </summary>
        </member>
        <member name="P:formulate.app.Entities.EntityRoot.Kind">
            <summary>
            The kind of this entity.
            </summary>
        </member>
        <member name="T:formulate.app.Entities.IEntity">
            <summary>
            An entity (form, folder, layout, etc.).
            </summary>
        </member>
        <member name="P:formulate.app.Entities.IEntity.Id">
            <summary>
            The unique identifier of this entity.
            </summary>
        </member>
        <member name="P:formulate.app.Entities.IEntity.Path">
            <summary>
            The entity path to this entity.
            </summary>
            <remarks>
            This path excludes the root, but includes the entity ID.
            </remarks>
        </member>
        <member name="P:formulate.app.Entities.IEntity.Name">
            <summary>
            The name of this entity.
            </summary>
        </member>
        <member name="P:formulate.app.Entities.IEntity.Icon">
            <summary>
            The icon to show in entity trees.
            </summary>
        </member>
        <member name="P:formulate.app.Entities.IEntity.Kind">
            <summary>
            The kind of this entity.
            </summary>
        </member>
        <member name="T:formulate.app.Folders.Folder">
            <summary>
            A folder.
            </summary>
        </member>
        <member name="P:formulate.app.Folders.Folder.Name">
            <summary>
            The name of this folder.
            </summary>
        </member>
        <member name="P:formulate.app.Folders.Folder.Id">
            <summary>
            The unique identifier of this folder.
            </summary>
        </member>
        <member name="P:formulate.app.Folders.Folder.Path">
            <summary>
            The entity path to this folder.
            </summary>
            <remarks>
            This path excludes the root, but includes the folder ID.
            </remarks>
        </member>
        <member name="P:formulate.app.Folders.Folder.Icon">
            <summary>
            The icon for folders.
            </summary>
        </member>
        <member name="P:formulate.app.Folders.Folder.Kind">
            <summary>
            The kind of this entity.
            </summary>
        </member>
        <member name="T:formulate.app.Forms.ConfiguredForm">
            <summary>
            A configured form (i.e., a form / layout / template).
            </summary>
        </member>
        <member name="P:formulate.app.Forms.ConfiguredForm.Icon">
            <summary>
            The icon for configured forms.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.ConfiguredForm.Id">
            <summary>
            The unique ID of this configured form.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.ConfiguredForm.Kind">
            <summary>
            The kind of this entity.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.ConfiguredForm.Name">
            <summary>
            The name of this configured form.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.ConfiguredForm.Path">
            <summary>
            The entity path to this configured form.
            </summary>
            <remarks>
            This path excludes the root, but includes the configured form ID.
            </remarks>
        </member>
        <member name="P:formulate.app.Forms.ConfiguredForm.TemplateId">
            <summary>
            The ID of the template.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.ConfiguredForm.LayoutId">
            <summary>
            The ID of the layout.
            </summary>
        </member>
        <member name="M:formulate.app.Forms.Fields.Button.ButtonField.DeserializeConfiguration(System.String)">
            <summary>
            Deserializes the configuration for the button field.
            </summary>
            <param name="configuration">
            The serialized configuration.
            </param>
            <returns>
            The deserialized configuration.
            </returns>
        </member>
        <member name="M:formulate.app.Forms.Fields.Button.ButtonField.FormatValue(System.Collections.Generic.IEnumerable{System.String},formulate.app.Forms.FieldPresentationFormats,System.Object)">
            <summary>
            Formats a value in the specified field presentation format.
            </summary>
            <param name="values">
            The values to format.
            </param>
            <param name="format">
            The format to present the value in.
            </param>
            <param name="configuration">
            The configuration for this field.
            </param>
            <returns>
            The formatted value.
            </returns>
        </member>
        <member name="M:formulate.app.Forms.Fields.Button.ButtonField.IsValid(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Is the field value valid?
            </summary>
            <param name="value">The value submitted with the form.</param>
            <returns>
            True, if the value is valid; otherwise, false.
            </returns>
        </member>
        <member name="T:formulate.app.Forms.Fields.ExtendedRadioButtonList.ExtendedRadioButtonListField">
            <summary>
            An extended radio button list field type.
            </summary>
            <remarks>
            The extended radio button list differs from the plain radio button list in that each item
            has two text fields associated with it. You can use this, for example, to add some clarifying
            text under each radio button selection.
            </remarks>
        </member>
        <member name="P:formulate.app.Forms.Fields.ExtendedRadioButtonList.ExtendedRadioButtonListField.Directive">
            <summary>
            The Angular directive for this field type.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Fields.ExtendedRadioButtonList.ExtendedRadioButtonListField.TypeLabel">
            <summary>
            The label to show in the UI for this field type.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Fields.ExtendedRadioButtonList.ExtendedRadioButtonListField.Icon">
            <summary>
            The icon to display in the selection screen for this field type.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Fields.ExtendedRadioButtonList.ExtendedRadioButtonListField.TypeId">
            <summary>
            The GUID that uniquely identifies this field type (useful for serialization).
            </summary>
        </member>
        <member name="M:formulate.app.Forms.Fields.ExtendedRadioButtonList.ExtendedRadioButtonListField.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:formulate.app.Forms.Fields.ExtendedRadioButtonList.ExtendedRadioButtonListField.DeserializeConfiguration(System.String)">
            <summary>
            Deserialize the configuration for a radio button list field.
            </summary>
            <param name="configuration">
            The serialized configuration.
            </param>
            <returns>
            The deserialized configuration.
            </returns>
        </member>
        <member name="M:formulate.app.Forms.Fields.ExtendedRadioButtonList.ExtendedRadioButtonListField.FormatValue(System.Collections.Generic.IEnumerable{System.String},formulate.app.Forms.FieldPresentationFormats,System.Object)">
            <summary>
            Formats a value in the specified field presentation format.
            </summary>
            <param name="values">
            The values to format.
            </param>
            <param name="format">
            The format to present the value in.
            </param>
            <param name="configuration">
            The configuration for this field.
            </param>
            <returns>
            The formatted value.
            </returns>
        </member>
        <member name="T:formulate.app.Forms.Fields.CheckboxList.CheckboxListField">
            <summary>
            A checkbox list field type.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Fields.CheckboxList.CheckboxListField.Directive">
            <summary>
            The Angular directive for this field type.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Fields.CheckboxList.CheckboxListField.TypeLabel">
            <summary>
            The label to show in the UI for this field type.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Fields.CheckboxList.CheckboxListField.Icon">
            <summary>
            The icon to display in the selection screen for this field type.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Fields.CheckboxList.CheckboxListField.TypeId">
            <summary>
            The GUID that uniquely identifies this field type (useful for serialization).
            </summary>
        </member>
        <member name="M:formulate.app.Forms.Fields.CheckboxList.CheckboxListField.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:formulate.app.Forms.Fields.CheckboxList.CheckboxListField.DeserializeConfiguration(System.String)">
            <summary>
            Deserialize the configuration for a checkbox list field.
            </summary>
            <param name="configuration">
            The serialized configuration.
            </param>
            <returns>
            The deserialized configuration.
            </returns>
        </member>
        <member name="M:formulate.app.Forms.Fields.CheckboxList.CheckboxListField.FormatValue(System.Collections.Generic.IEnumerable{System.String},formulate.app.Forms.FieldPresentationFormats,System.Object)">
            <summary>
            Formats a value in the specified field presentation format.
            </summary>
            <param name="values">
            The values to format.
            </param>
            <param name="format">
            The format to present the value in.
            </param>
            <param name="configuration">
            The configuration for this field.
            </param>
            <returns>
            The formatted value.
            </returns>
        </member>
        <member name="T:formulate.app.Forms.Fields.RadioButtonList.RadioButtonListField">
            <summary>
            A radio button list field type.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Fields.RadioButtonList.RadioButtonListField.Directive">
            <summary>
            The Angular directive for this field type.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Fields.RadioButtonList.RadioButtonListField.TypeLabel">
            <summary>
            The label to show in the UI for this field type.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Fields.RadioButtonList.RadioButtonListField.Icon">
            <summary>
            The icon to display in the selection screen for this field type.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Fields.RadioButtonList.RadioButtonListField.TypeId">
            <summary>
            The GUID that uniquely identifies this field type (useful for serialization).
            </summary>
        </member>
        <member name="M:formulate.app.Forms.Fields.RadioButtonList.RadioButtonListField.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:formulate.app.Forms.Fields.RadioButtonList.RadioButtonListField.DeserializeConfiguration(System.String)">
            <summary>
            Deserialize the configuration for a radio button list field.
            </summary>
            <param name="configuration">
            The serialized configuration.
            </param>
            <returns>
            The deserialized configuration.
            </returns>
        </member>
        <member name="M:formulate.app.Forms.Fields.RadioButtonList.RadioButtonListField.FormatValue(System.Collections.Generic.IEnumerable{System.String},formulate.app.Forms.FieldPresentationFormats,System.Object)">
            <summary>
            Formats a value in the specified field presentation format.
            </summary>
            <param name="values">
            The values to format.
            </param>
            <param name="format">
            The format to present the value in.
            </param>
            <param name="configuration">
            The configuration for this field.
            </param>
            <returns>
            The formatted value.
            </returns>
        </member>
        <member name="T:formulate.app.Forms.Fields.Header.HeaderField">
            <summary>
            A field that can be used to display a header in a form.
            </summary>
        </member>
        <member name="M:formulate.app.Forms.Fields.Header.HeaderField.DeserializeConfiguration(System.String)">
            <summary>
            Deserializes the configuration for the header field.
            </summary>
            <param name="configuration">
            The serialized configuration.
            </param>
            <returns>
            The deserialized configuration.
            </returns>
        </member>
        <member name="M:formulate.app.Forms.Fields.Header.HeaderField.FormatValue(System.Collections.Generic.IEnumerable{System.String},formulate.app.Forms.FieldPresentationFormats,System.Object)">
            <summary>
            Formats a value in the specified field presentation format.
            </summary>
            <param name="values">
            The values to format.
            </param>
            <param name="format">
            The format to present the value in.
            </param>
            <param name="configuration">
            The configuration for this field.
            </param>
            <returns>
            The formatted value.
            </returns>
        </member>
        <member name="M:formulate.app.Forms.Fields.Header.HeaderField.IsValid(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Is the field value valid?
            </summary>
            <param name="value">The value submitted with the form.</param>
            <returns>
            True, if the value is valid; otherwise, false.
            </returns>
        </member>
        <member name="T:formulate.app.Forms.Fields.TextConstant.TextConstantField">
            <summary>
            A field that can be used to store a text constant.
            </summary>
            <remarks>
            A text constant field is useful, for example, when you need to store a bit of text
            in a field so that it can be sent as a parameter to a web API, but you otherwise
            don't need the field to be output to the page when the form is rendered.
            </remarks>
        </member>
        <member name="M:formulate.app.Forms.Fields.TextConstant.TextConstantField.DeserializeConfiguration(System.String)">
            <summary>
            Deserializes the configuration for the text constant field.
            </summary>
            <param name="configuration">
            The serialized configuration.
            </param>
            <returns>
            The deserialized configuration.
            </returns>
        </member>
        <member name="M:formulate.app.Forms.Fields.TextConstant.TextConstantField.FormatValue(System.Collections.Generic.IEnumerable{System.String},formulate.app.Forms.FieldPresentationFormats,System.Object)">
            <summary>
            Formats a value in the specified field presentation format.
            </summary>
            <param name="values">
            The values to format.
            </param>
            <param name="format">
            The format to present the value in.
            </param>
            <param name="configuration">
            The configuration for this field.
            </param>
            <returns>
            The formatted value.
            </returns>
        </member>
        <member name="M:formulate.app.Forms.Fields.TextConstant.TextConstantField.IsValid(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Is the field value valid?
            </summary>
            <param name="value">The value submitted with the form.</param>
            <returns>
            True, if the value is valid; otherwise, false.
            </returns>
        </member>
        <member name="T:formulate.app.Forms.Fields.RichText.RichTextField">
            <summary>
            A field that can be used to display rich text in a form.
            </summary>
        </member>
        <member name="M:formulate.app.Forms.Fields.RichText.RichTextField.DeserializeConfiguration(System.String)">
            <summary>
            Deserializes the configuration for the rich text field.
            </summary>
            <param name="configuration">
            The serialized configuration.
            </param>
            <returns>
            The deserialized configuration.
            </returns>
        </member>
        <member name="M:formulate.app.Forms.Fields.RichText.RichTextField.FormatValue(System.Collections.Generic.IEnumerable{System.String},formulate.app.Forms.FieldPresentationFormats,System.Object)">
            <summary>
            Formats a value in the specified field presentation format.
            </summary>
            <param name="values">
            The values to format.
            </param>
            <param name="format">
            The format to present the value in.
            </param>
            <param name="configuration">
            The configuration for this field.
            </param>
            <returns>
            The formatted value.
            </returns>
        </member>
        <member name="M:formulate.app.Forms.Fields.RichText.RichTextField.IsValid(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Is the field value valid?
            </summary>
            <param name="value">The value submitted with the form.</param>
            <returns>
            True, if the value is valid; otherwise, false.
            </returns>
        </member>
        <member name="T:formulate.app.Forms.Fields.DropDown.DropDownField">
            <summary>
            A drop down field type.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Fields.DropDown.DropDownField.Directive">
            <summary>
            The Angular directive for this field type.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Fields.DropDown.DropDownField.TypeLabel">
            <summary>
            The label to show in the UI for this field type.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Fields.DropDown.DropDownField.Icon">
            <summary>
            The icon to display in the selection screen for this field type.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Fields.DropDown.DropDownField.TypeId">
            <summary>
            The GUID that uniquely identifies this field type (useful for serialization).
            </summary>
        </member>
        <member name="M:formulate.app.Forms.Fields.DropDown.DropDownField.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:formulate.app.Forms.Fields.DropDown.DropDownField.DeserializeConfiguration(System.String)">
            <summary>
            Deserialize the configuration for a drop down field.
            </summary>
            <param name="configuration">
            The serialized configuration.
            </param>
            <returns>
            The deserialized configuration.
            </returns>
        </member>
        <member name="M:formulate.app.Forms.Fields.DropDown.DropDownField.FormatValue(System.Collections.Generic.IEnumerable{System.String},formulate.app.Forms.FieldPresentationFormats,System.Object)">
            <summary>
            Formats a value in the specified field presentation format.
            </summary>
            <param name="values">
            The values to format.
            </param>
            <param name="format">
            The format to present the value in.
            </param>
            <param name="configuration">
            The configuration for this field.
            </param>
            <returns>
            The formatted value.
            </returns>
        </member>
        <member name="T:formulate.app.Forms.Form">
            <summary>
            A form.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Form.Id">
            <summary>
            The unique ID of this form.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Form.Path">
            <summary>
            The entity path to this form.
            </summary>
            <remarks>
            This path excludes the root, but includes the form ID.
            </remarks>
        </member>
        <member name="P:formulate.app.Forms.Form.Alias">
            <summary>
            The alias of this form.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Form.Name">
            <summary>
            The name of this form.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Form.Icon">
            <summary>
            The icon for forms.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Form.Kind">
            <summary>
            The kind of this entity.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Form.Fields">
            <summary>
            The fields on this form.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Form.Handlers">
            <summary>
            The handlers on this form.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Form.MetaInfo">
            <summary>
            Information about this form.
            </summary>
        </member>
        <member name="M:formulate.app.Forms.Form.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:formulate.app.Forms.FormField`1">
            <summary>
            Stores information about a form field.
            </summary>
            <typeparam name="T">The type of data stored by this form field.</typeparam>
        </member>
        <member name="P:formulate.app.Forms.FormField`1.Id">
            <summary>
            The unique ID of the field.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormField`1.Alias">
            <summary>
            The alias of the field.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormField`1.Name">
            <summary>
            The name of the field.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormField`1.Label">
            <summary>
            The label for the field.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormField`1.Category">
            <summary>
            The category of the field.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormField`1.Validations">
            <summary>
            The validations for this field.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormField`1.MetaInfo">
            <summary>
            Information about the field.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormField`1.FieldConfiguration">
            <summary>
            The configuration data stored by the field.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormField`1.TypeId">
            <summary>
            The ID of the field type.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormField`1.IsTransitory">
            <summary>
            Is this type of field persistent or transitory?
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormField`1.IsServerSideOnly">
            <summary>
            Is this type of field server-side only (i.e., not a frontend field)?
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormField`1.IsHidden">
            <summary>
            Is this type of field hidden?
            </summary>
        </member>
        <member name="M:formulate.app.Forms.FormField`1.GetDirective">
            <summary>
            Gets the directive to use for this form field.
            </summary>
            <returns>The directive.</returns>
        </member>
        <member name="M:formulate.app.Forms.FormField`1.GetTypeLabel">
            <summary>
            Gets the type label to use for this form field.
            </summary>
            <returns>The type label.</returns>
        </member>
        <member name="M:formulate.app.Forms.FormField`1.GetIcon">
            <summary>
            Gets the icon to use for this form field.
            </summary>
            <returns>The icon.</returns>
        </member>
        <member name="M:formulate.app.Forms.FormField`1.GetFieldType">
            <summary>
            Returns the type of field.
            </summary>
            <returns>
            The field type.
            </returns>
        </member>
        <member name="M:formulate.app.Forms.FormField`1.DeserializeConfiguration">
            <summary>
            Deserializes the field configuration into a .NET object instance.
            </summary>
            <returns>
            The deserialized field configuration.
            </returns>
        </member>
        <member name="M:formulate.app.Forms.FormField`1.FormatValue(System.Collections.Generic.IEnumerable{System.String},formulate.app.Forms.FieldPresentationFormats)">
            <summary>
            Formats a value in the specified field presentation format.
            </summary>
            <param name="values">
            The values to format.
            </param>
            <param name="format">
            The format to present the value in.
            </param>
            <returns>
            The formatted value.
            </returns>
        </member>
        <member name="M:formulate.app.Forms.FormField`1.IsValid(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Is the field value valid?
            </summary>
            <param name="value">
            The value submitted with the form.
            </param>
            <returns>
            True, if the value is valid; otherwise, false.
            </returns>
        </member>
        <member name="T:formulate.app.Forms.FormFieldMetaInfo`1">
            <summary>
            Information attached to a form field.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormFieldMetaInfo`1.Alias">
            <summary>
            The alias of this field meta information.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormFieldMetaInfo`1.Name">
            <summary>
            The name of this field meta information.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormFieldMetaInfo`1.Data">
            <summary>
            The data stored by this form field meta information.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormFieldMetaInfo`1.ValueType">
            <summary>
            The type of data stored by this field meta information.
            </summary>
        </member>
        <member name="T:formulate.app.Forms.FormHandler`1">
            <summary>
            Stores information about a form handler.
            </summary>
            <typeparam name="T">The type of data stored by this form handler.</typeparam>
        </member>
        <member name="P:formulate.app.Forms.FormHandler`1.Handler">
            <summary>
            The form handler.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormHandler`1.Id">
            <summary>
            The unique ID of the handler.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormHandler`1.Alias">
            <summary>
            The alias of the handler.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormHandler`1.Name">
            <summary>
            The name of the handler.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormHandler`1.HandlerConfiguration">
            <summary>
            The configuration data stored by the handler.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormHandler`1.TypeId">
            <summary>
            The ID of the handler type.
            </summary>
        </member>
        <member name="M:formulate.app.Forms.FormHandler`1.GetDirective">
            <summary>
            Gets the directive to use for this form handler.
            </summary>
            <returns>The directive.</returns>
        </member>
        <member name="M:formulate.app.Forms.FormHandler`1.GetTypeLabel">
            <summary>
            Gets the type label to use for this form handler.
            </summary>
            <returns>The type label.</returns>
        </member>
        <member name="M:formulate.app.Forms.FormHandler`1.GetIcon">
            <summary>
            Gets the icon to use for this form handler.
            </summary>
            <returns>The icon.</returns>
        </member>
        <member name="M:formulate.app.Forms.FormHandler`1.GetHandlerType">
            <summary>
            Returns the type of handler.
            </summary>
            <returns>
            The handler type.
            </returns>
        </member>
        <member name="M:formulate.app.Forms.FormHandler`1.DeserializeConfiguration">
            <summary>
            Deserializes the handler configuration into a .NET object instance.
            </summary>
            <returns>
            The deserialized handler configuration.
            </returns>
        </member>
        <member name="M:formulate.app.Forms.FormHandler`1.PrepareHandleForm(formulate.app.Forms.FormSubmissionContext)">
            <summary>
            Prepares to handle a form submission.
            </summary>
            <param name="context">
            The form submission context.
            </param>
        </member>
        <member name="M:formulate.app.Forms.FormHandler`1.HandleForm(formulate.app.Forms.FormSubmissionContext)">
            <summary>
            Handles a form submission.
            </summary>
            <param name="context">
            The form submission context.
            </param>
        </member>
        <member name="T:formulate.app.Forms.FormMetaInfo`1">
            <summary>
            Information attached to a form.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormMetaInfo`1.Alias">
            <summary>
            The alias of this form meta information.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormMetaInfo`1.Name">
            <summary>
            The name of this form meta information.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormMetaInfo`1.Data">
            <summary>
            The data stored by this form meta information.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormMetaInfo`1.ValueType">
            <summary>
            The type of data stored by this form meta information.
            </summary>
        </member>
        <member name="T:formulate.app.Forms.FormSubmissionContext">
            <summary>
            The contextual information available during a form submission.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormSubmissionContext.Form">
            <summary>
            The form being submitted.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormSubmissionContext.Data">
            <summary>
            The data being submitted.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormSubmissionContext.Files">
            <summary>
            The files being submitted.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormSubmissionContext.Payload">
            <summary>
            Extra data related to the submission.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormSubmissionContext.CurrentPage">
            <summary>
            The current Umbraco page.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormSubmissionContext.HttpContext">
            <summary>
            The current HTTP context.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormSubmissionContext.Services">
            <summary>
            The Umbraco services.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormSubmissionContext.UmbracoHelper">
            <summary>
            The Umbraco helper.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormSubmissionContext.UmbracoContext">
            <summary>
            The Umbraco context.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormSubmissionContext.SubmissionId">
            <summary>
            A generated ID that can be used to track a submission.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.FormSubmissionContext.ExtraContext">
            <summary>
            Collection of multi-purpose contextual data.
            </summary>
        </member>
        <member name="T:formulate.app.Forms.Handlers.SendData.FieldMapping">
            <summary>
            A field mapping allows a custom name to be assigned to a field.
            </summary>
            <remarks>
            This is useful, for example, when translating Formulate fields for transmission
            to external systems that expect different field names than those used within
            Formulate.
            </remarks>
        </member>
        <member name="P:formulate.app.Forms.Handlers.SendData.FieldMapping.FieldId">
            <summary>
            Formulates field ID.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Handlers.SendData.FieldMapping.FieldName">
            <summary>
            The name to use for the field (typically, the name expected by an external system).
            </summary>
        </member>
        <member name="T:formulate.app.Forms.Handlers.SendData.IHandleSendDataResult">
            <summary>
            Classes that implement this interface can handle the result of a "Send Data" handler
            request to a web API.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Handlers.SendData.IHandleSendDataResult.Name">
            <summary>
            The name of this handler.
            </summary>
        </member>
        <member name="M:formulate.app.Forms.Handlers.SendData.IHandleSendDataResult.HandleResult(formulate.app.Forms.Handlers.SendData.SendDataResult)">
            <summary>
            This function is called at the end of a "Send Data" request.
            </summary>
            <param name="result">
            Any information available about the result of the "Send Data" request.
            </param>
        </member>
        <member name="T:formulate.app.Forms.Handlers.SendData.SendDataConfiguration">
            <summary>
            Stores the configuration for a "Send Data" form submission handler.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Handlers.SendData.SendDataConfiguration.Url">
            <summary>
            The URL to send data to.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Handlers.SendData.SendDataConfiguration.Method">
            <summary>
            The method (e.g., GET, POST) to use when sending the data.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Handlers.SendData.SendDataConfiguration.TransmissionFormat">
            <summary>
            The format (e.g., query string, form URL encoded, JSON, XML) to use when
            sending the data.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Handlers.SendData.SendDataConfiguration.Fields">
            <summary>
            The fields to use when sending the data.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Handlers.SendData.SendDataConfiguration.ResultHandler">
            <summary>
            The function that handles the result of a "Send Data" request.
            </summary>
        </member>
        <member name="T:formulate.app.Forms.Handlers.SendData.SendDataHandler">
            <summary>
            A handler that sends a data to a web API.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Handlers.SendData.SendDataHandler.Config">
            <summary>
            Configuration manager.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Handlers.SendData.SendDataHandler.Directive">
            <summary>
            The Angular directive that renders this handler.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Handlers.SendData.SendDataHandler.Icon">
            <summary>
            The icon shown in the picker dialog.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Handlers.SendData.SendDataHandler.TypeId">
            <summary>
            The ID that uniquely identifies this handler (useful for serialization).
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Handlers.SendData.SendDataHandler.TypeLabel">
            <summary>
            The label that appears when the user is choosing the handler.
            </summary>
        </member>
        <member name="M:formulate.app.Forms.Handlers.SendData.SendDataHandler.DeserializeConfiguration(System.String)">
            <summary>
            Deserializes the configuration for a send data handler.
            </summary>
            <param name="configuration">
            The serialized configuration.
            </param>
            <returns>
            The deserialized configuration.
            </returns>
        </member>
        <member name="M:formulate.app.Forms.Handlers.SendData.SendDataHandler.PrepareHandleForm(formulate.app.Forms.FormSubmissionContext,System.Object)">
            <summary>
            Prepares to handle to form submission.
            </summary>
            <param name="context">
            The form submission context.
            </param>
            <param name="configuration">
            The handler configuration.
            </param>
            <remarks>
            In this case, no preparation is necessary.
            </remarks>
        </member>
        <member name="M:formulate.app.Forms.Handlers.SendData.SendDataHandler.HandleForm(formulate.app.Forms.FormSubmissionContext,System.Object)">
            <summary>
            Handles a form submission (sends data to a web API).
            </summary>
            <param name="context">
            The form submission context.
            </param>
            <param name="configuration">
            The handler configuration.
            </param>
        </member>
        <member name="M:formulate.app.Forms.Handlers.SendData.SendDataHandler.SendData(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.Boolean,System.Boolean)">
            <summary>
            Sends a web request with the data either in the query string or in the body.
            </summary>
            <param name="url">
            The URL to send the request to.
            </param>
            <param name="data">
            The data to send.
            </param>
            <param name="method">
            The HTTP method (e.g., GET, POST) to use when sending the request.
            </param>
            <param name="sendInBody">
            Send the data as part of the body (or in the query string)?
            </param>
            <param name="sendJson">
            Send the data as json
            </param>
            <returns>
            True, if the request was a success; otherwise, false.
            </returns>
            <remarks>
            Parts of this function are from: http://stackoverflow.com/a/9772003/2052963
            and http://stackoverflow.com/questions/14702902
            </remarks>
        </member>
        <member name="M:formulate.app.Forms.Handlers.SendData.SendDataHandler.ConstructQueryString(System.Uri,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Constructs a query string from the specified URL and data.
            </summary>
            <param name="uri">
            The URL (potentially containing a query string).
            </param>
            <param name="data">
            The data.
            </param>
            <returns>
            The query string.
            </returns>
        </member>
        <member name="T:formulate.app.Forms.Handlers.SendData.SendDataResult">
            <summary>
            Stores the result of a "Send Data" request.
            </summary>
            <remarks>
            Since there are many types of "Send Data" requests, there are some properties of this
            class that may not be populated.
            </remarks>
        </member>
        <member name="P:formulate.app.Forms.Handlers.SendData.SendDataResult.HttpWebResponse">
            <summary>
            The HTTP web response, if applicable to this result.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Handlers.SendData.SendDataResult.ResponseText">
            <summary>
            The response text, if applicable to this result.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Handlers.SendData.SendDataResult.ResponseError">
            <summary>
            The response error, if one occurs.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Handlers.SendData.SendDataResult.Success">
            <summary>
            Was the request a success?
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Handlers.SendData.SendDataResult.Context">
            <summary>
            The form submission context.
            </summary>
        </member>
        <member name="T:formulate.app.Forms.Handlers.Email.EmailHandler">
            <summary>
            A handler that sends an email.
            </summary>
        </member>
        <member name="F:formulate.app.Forms.Handlers.Email.EmailHandler.ExtraRecipientsKey">
            <summary>
            The key to use when extracting the extra email recipients from the extra context on the
            form submission context. The value is expected to be a list of strings, with each string
            being an email address.
            </summary>
        </member>
        <member name="F:formulate.app.Forms.Handlers.Email.EmailHandler.ExtraSubjectKey">
            <summary>
            The key to use when extracting the extra subject line text from the extra context on the
            form submission context. The value is expected to be a string.
            </summary>
        </member>
        <member name="F:formulate.app.Forms.Handlers.Email.EmailHandler.ExtraMessageKey">
            <summary>
            The key to use when extracting the extra message body text from the extra context on the
            form submission context. The value is expected to be a string.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Handlers.Email.EmailHandler.Config">
            <summary>
            Configuration manager.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Handlers.Email.EmailHandler.Directive">
            <summary>
            The Angular directive that renders this handler.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Handlers.Email.EmailHandler.Icon">
            <summary>
            The icon shown in the picker dialog.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Handlers.Email.EmailHandler.TypeId">
            <summary>
            The ID that uniquely identifies this handler (useful for serialization).
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Handlers.Email.EmailHandler.TypeLabel">
            <summary>
            The label that appears when the user is choosing the handler.
            </summary>
        </member>
        <member name="M:formulate.app.Forms.Handlers.Email.EmailHandler.DeserializeConfiguration(System.String)">
            <summary>
            Deserializes the configuration for an email handler.
            </summary>
            <param name="configuration">
            The serialized configuration.
            </param>
            <returns>
            The deserialized configuration.
            </returns>
        </member>
        <member name="M:formulate.app.Forms.Handlers.Email.EmailHandler.PrepareHandleForm(formulate.app.Forms.FormSubmissionContext,System.Object)">
            <summary>
            Prepares to handle to form submission.
            </summary>
            <param name="context">
            The form submission context.
            </param>
            <param name="configuration">
            The handler configuration.
            </param>
            <remarks>
            In this case, no preparation is necessary.
            </remarks>
        </member>
        <member name="M:formulate.app.Forms.Handlers.Email.EmailHandler.HandleForm(formulate.app.Forms.FormSubmissionContext,System.Object)">
            <summary>
            Handles a form submission (sends an email).
            </summary>
            <param name="context">
            The form submission context.
            </param>
            <param name="configuration">
            The handler configuration.
            </param>
        </member>
        <member name="M:formulate.app.Forms.Handlers.Email.EmailHandler.ConstructMessage(formulate.app.Forms.Form,System.Collections.Generic.IEnumerable{formulate.core.Types.FieldSubmission},System.Collections.Generic.IEnumerable{formulate.core.Types.FileFieldSubmission},System.Collections.Generic.IEnumerable{formulate.core.Types.PayloadSubmission},System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructs an email message from the form fields.
            </summary>
            <param name="form">
            The form being submitted.
            </param>
            <param name="data">
            The form fields.
            </param>
            <param name="files">
            The form files.
            </param>
            <param name="payload">
            Extra data related to the submission.
            </param>
            <param name="baseMessage">
            The base message to use (before any fields have been appended).
            </param>
            <param name="includeHiddenFields">
            Include hidden fields in the message?
            </param>
            <param name="excludeFieldLabels">
            Exclude the field labels when constructing the message?
            </param>
            <returns>
            The email message.
            </returns>
        </member>
        <member name="M:formulate.app.Forms.Handlers.Email.EmailHandler.FilterEmails(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Filters the email addresses to only return those allowed by the whitelist.
            </summary>
            <param name="emails">
            The email addresses to filter.
            </param>
            <returns>
            The allowed email addresses.
            </returns>
        </member>
        <member name="M:formulate.app.Forms.Handlers.Email.EmailHandler.IsEmailInValidFormat(System.String)">
            <summary>
            Indicates whether or not the specified email address is in a valid format.
            </summary>
            <param name="email">
            The email address.
            </param>
            <returns>
            True, if the email address is in a valid format; otherwise, false.
            </returns>
            <remarks>
            This code is based on this Stack Overflow answer: http://stackoverflow.com/a/1374644/2052963
            </remarks>
        </member>
        <member name="M:formulate.app.Forms.Handlers.Email.EmailHandler.AttemptGetValue(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Attempts to get a value from a dictionary.
            </summary>
            <param name="dictionary">
            The dictionary to get the value from.
            </param>
            <param name="key">
            The key to use when getting the value.
            </param>
            <returns>
            The value, or null.
            </returns>
        </member>
        <member name="T:formulate.app.Forms.Handlers.StoreData.StoreDataHandler">
            <summary>
            A form submission handler that stores the submitted data.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Handlers.StoreData.StoreDataHandler.Config">
            <summary>
            Configuration manager.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Handlers.StoreData.StoreDataHandler.Directive">
            <summary>
            The Angular directive that renders this handler.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Handlers.StoreData.StoreDataHandler.Icon">
            <summary>
            The icon shown in the picker dialog.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Handlers.StoreData.StoreDataHandler.TypeId">
            <summary>
            The ID that uniquely identifies this handler (useful for serialization).
            </summary>
        </member>
        <member name="P:formulate.app.Forms.Handlers.StoreData.StoreDataHandler.TypeLabel">
            <summary>
            The label that appears when the user is choosing the handler.
            </summary>
        </member>
        <member name="M:formulate.app.Forms.Handlers.StoreData.StoreDataHandler.DeserializeConfiguration(System.String)">
            <summary>
            Deserializes the configuration for a store data handler.
            </summary>
            <param name="configuration">
            The configuration.
            </param>
            <returns>
            The deserialized configuration.
            </returns>
            <remarks>
            In this case, no deserialization is necessary.
            </remarks>
        </member>
        <member name="M:formulate.app.Forms.Handlers.StoreData.StoreDataHandler.PrepareHandleForm(formulate.app.Forms.FormSubmissionContext,System.Object)">
            <summary>
            Prepares to handle to form submission.
            </summary>
            <param name="context">
            The form submission context.
            </param>
            <param name="configuration">
            The handler configuration.
            </param>
            <remarks>
            In this case, no preparation is necessary.
            </remarks>
        </member>
        <member name="M:formulate.app.Forms.Handlers.StoreData.StoreDataHandler.HandleForm(formulate.app.Forms.FormSubmissionContext,System.Object)">
            <summary>
            Handles a form submission (stores it).
            </summary>
            <param name="context">
            The form submission context.
            </param>
            <param name="configuration">
            The handler configuration.
            </param>
        </member>
        <member name="M:formulate.app.Forms.Handlers.StoreData.StoreDataHandler.GetFieldName(System.Guid,System.Collections.Generic.Dictionary{System.Guid,formulate.app.Forms.IFormField})">
            <summary>
            Tries to get a field name by its ID.
            </summary>
            <param name="fieldId">
            The field ID.
            </param>
            <param name="fieldsById">
            The dictionary of fields.
            </param>
            <returns>
            The field name, or null.
            </returns>
        </member>
        <member name="M:formulate.app.Forms.Handlers.StoreData.StoreDataHandler.GenerateFilePathSegment">
            <summary>
            Generates a file path segment.
            </summary>
            <returns>
            The file path segment (e.g., "2016-1-1/00000000000000000").
            </returns>
            <remarks>
            This is used to generate unique paths so lots of files can be stored without
            the names colliding.
            </remarks>
        </member>
        <member name="T:formulate.app.Forms.IFormField">
            <summary>
            Interface for all form fields.
            </summary>
        </member>
        <member name="T:formulate.app.Forms.IFormFieldMetaInfo">
            <summary>
            The interface for all form field meta information.
            </summary>
        </member>
        <member name="T:formulate.app.Forms.IFormFieldTypeExtended">
            <summary>
            Interface for form field types that require additional, uncommon functionality.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.IFormFieldTypeExtended.IsTransitory">
            <summary>
            This is set to true on form fields that are transitory (i.e., they aren't
            used for data).
            </summary>
            <remarks>
            Some examples include buttons and read only text fields.
            </remarks>
        </member>
        <member name="P:formulate.app.Forms.IFormFieldTypeExtended.IsServerSideOnly">
            <summary>
            This is set to true on form fields that are server-side only (i.e., they
            aren't rendered on the frontend of the website).
            </summary>
        </member>
        <member name="P:formulate.app.Forms.IFormFieldTypeExtended.IsHidden">
            <summary>
            This is true for fields that are hidden during data entry.
            </summary>
        </member>
        <member name="M:formulate.app.Forms.IFormFieldTypeExtended.IsValid(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Is the field value valid?
            </summary>
            <param name="value">The value submitted with the form.</param>
            <returns>
            True, if the value is valid; otherwise, false.
            </returns>
        </member>
        <member name="T:formulate.app.Forms.IFormHandler">
            <summary>
            Interface for all form handlers.
            </summary>
        </member>
        <member name="T:formulate.app.Forms.IFormHandlerType">
            <summary>
            Any classes implementing this interface will be used as form submission handlers.
            </summary>
        </member>
        <member name="P:formulate.app.Forms.IFormHandlerType.Directive">
            <summary>
            The AngularJS directive to render in the back office (e.g., "formulat-email-handler").
            </summary>
        </member>
        <member name="P:formulate.app.Forms.IFormHandlerType.TypeLabel">
            <summary>
            The label to display in the back office (e.g., "Email").
            </summary>
        </member>
        <member name="P:formulate.app.Forms.IFormHandlerType.Icon">
            <summary>
            The icon to display in the back office (e.g., "icon-formulate-email").
            </summary>
        </member>
        <member name="P:formulate.app.Forms.IFormHandlerType.TypeId">
            <summary>
            The GUID that uniquely identifies the form submission handler.
            </summary>
            <remarks>
            Used for serialization/deserialization.
            </remarks>
        </member>
        <member name="M:formulate.app.Forms.IFormHandlerType.DeserializeConfiguration(System.String)">
            <summary>
            Deserializes the string configuration.
            </summary>
            <param name="configuration">
            The string configuration.
            </param>
            <returns>
            The deserialized configuration.
            </returns>
        </member>
        <member name="M:formulate.app.Forms.IFormHandlerType.PrepareHandleForm(formulate.app.Forms.FormSubmissionContext,System.Object)">
            <summary>
            Preparation to handle the form submission.
            </summary>
            <param name="context">
            The submission context.
            </param>
            <param name="configuration">
            The form submission handler configuration.
            </param>
            <remarks>
            This is guaranteed to occur in the same thread as the form submission.
            </remarks>
        </member>
        <member name="M:formulate.app.Forms.IFormHandlerType.HandleForm(formulate.app.Forms.FormSubmissionContext,System.Object)">
            <summary>
            Handles the form submission.
            </summary>
            <param name="context">
            The submission context.
            </param>
            <param name="configuration">
            The form submission handler configuration.
            </param>
            <remarks>
            This may or may not be called in a different thread than the form submission.
            </remarks>
        </member>
        <member name="T:formulate.app.Forms.IFormMetaInfo">
            <summary>
            The interface for all form meta information.
            </summary>
        </member>
        <member name="T:formulate.app.Handlers.ApplicationStartedHandler">
            <summary>
            Handles the application started event.
            </summary>
        </member>
        <member name="M:formulate.app.Handlers.ApplicationStartedHandler.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:formulate.app.Handlers.ApplicationStartedHandler.ApplicationStarted(Umbraco.Core.UmbracoApplicationBase,Umbraco.Core.ApplicationContext)">
            <summary>
            Application started.
            </summary>
        </member>
        <member name="M:formulate.app.Handlers.ApplicationStartedHandler.InitializeDatabase(Umbraco.Core.ApplicationContext)">
            <summary>
            Modifies the database (e.g., adding necessary tables).
            </summary>
            <param name="applicationContext">
            The application context.
            </param>
        </member>
        <member name="M:formulate.app.Handlers.ApplicationStartedHandler.AddServerVariables(System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Adds server variables for use by the JavaScript.
            </summary>
        </member>
        <member name="M:formulate.app.Handlers.ApplicationStartedHandler.HandleInstallAndUpgrade(Umbraco.Core.ApplicationContext)">
            <summary>
            Handles install and upgrade operations.
            </summary>
        </member>
        <member name="M:formulate.app.Handlers.ApplicationStartedHandler.HandleInstall(Umbraco.Core.ApplicationContext,System.Boolean)">
            <summary>
            Handles install operations.
            </summary>
            <param name="isUpgrade">
            Is this an upgrade to an existing instllation?
            </param>
            <param name="applicationContext">
            The current Umbraco application context.
            </param>
        </member>
        <member name="M:formulate.app.Handlers.ApplicationStartedHandler.GetInstalledVersion">
            <summary>
            Gets the installed version.
            </summary>
            <returns>The installed version, or null.</returns>
        </member>
        <member name="M:formulate.app.Handlers.ApplicationStartedHandler.DoesAppSettingExist(System.String)">
            <summary>
            Indicates whether or not the application setting with the specified key has a non-empty
            value in the web.config.
            </summary>
            <param name="key">
            The application setting key.
            </param>
            <returns>
            True, if the value in the web.config is non-empty; otherwise, false.
            </returns>
        </member>
        <member name="M:formulate.app.Handlers.ApplicationStartedHandler.AddSection(Umbraco.Core.ApplicationContext)">
            <summary>
            Adds the Formulate section to Umbraco.
            </summary>
            <param name="applicationContext">
            The current application context.
            </param>
        </member>
        <member name="M:formulate.app.Handlers.ApplicationStartedHandler.AddDashboard">
            <summary>
            Adds the Formulate dashboard to the Formulate section.
            </summary>
        </member>
        <member name="M:formulate.app.Handlers.ApplicationStartedHandler.DashboardExists">
            <summary>
            Indicates whether or not the "FormulateSection" exists in
            the dashboard.config.
            </summary>
        </member>
        <member name="M:formulate.app.Handlers.ApplicationStartedHandler.FormulateDeveloperTabExists">
            <summary>
            Indicates whether or not the "Formulate" installation tab
            exists in the developer section of the dashboard.config.
            </summary>
            <returns>
            True, if the tab exists; otherwise, false.
            </returns>
        </member>
        <member name="M:formulate.app.Handlers.ApplicationStartedHandler.AddFormulateDeveloperTab">
            <summary>
            Adds the "Formulate" tab to the developer section of the
            dashboard.config.
            </summary>
        </member>
        <member name="M:formulate.app.Handlers.ApplicationStartedHandler.EnsureAppSettings">
            <summary>
            Adds or replaces the Formulate version number in the web.config, along with some other
            application settings.
            </summary>
        </member>
        <member name="M:formulate.app.Handlers.ApplicationStartedHandler.PermitAccess">
            <summary>
            Permits all users to access Formulate if configured in the web.config.
            </summary>
        </member>
        <member name="M:formulate.app.Handlers.ApplicationStartedHandler.AddConfigurationGroup">
            <summary>
            Transforms the web.config to add the Formulate configuration group.
            </summary>
        </member>
        <member name="M:formulate.app.Handlers.ApplicationStartedHandler.QueueInstallAction(System.Action)">
            <summary>
            Queues an install action to be run in a few seconds.
            </summary>
            <param name="action">
            The install action.
            </param>
        </member>
        <member name="M:formulate.app.Handlers.ApplicationStartedHandler.HandleInstallTimerElapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Once the install timer elapses, run the install actions.
            </summary>
        </member>
        <member name="T:formulate.app.Handlers.ApplicationStartingHandler">
            <summary>
            Handles the application starting event.
            </summary>
        </member>
        <member name="M:formulate.app.Handlers.ApplicationStartingHandler.ApplicationStarting(Umbraco.Core.UmbracoApplicationBase,Umbraco.Core.ApplicationContext)">
            <summary>
            Application starting.
            </summary>
        </member>
        <member name="M:formulate.app.Handlers.ApplicationStartingHandler.InitializeResolvers">
            <summary>
            Initializes resolvers.
            </summary>
        </member>
        <member name="T:formulate.app.Helpers.DataValueHelper">
            <summary>
            Helps with operations related to data values.
            </summary>
        </member>
        <member name="M:formulate.app.Helpers.DataValueHelper.GetAllDataValueKinds">
            <summary>
            Returns the data value kinds.
            </summary>
        </member>
        <member name="T:formulate.app.Helpers.DefinitionHelper">
            <summary>
            Helps with type definitions.
            </summary>
        </member>
        <member name="P:formulate.app.Helpers.DefinitionHelper.Config">
            <summary>
            Configuration manager.
            </summary>
        </member>
        <member name="P:formulate.app.Helpers.DefinitionHelper.Forms">
            <summary>
            Form persistence.
            </summary>
        </member>
        <member name="P:formulate.app.Helpers.DefinitionHelper.Layouts">
            <summary>
            Layout persistence.
            </summary>
        </member>
        <member name="P:formulate.app.Helpers.DefinitionHelper.Validations">
            <summary>
            Validation persistence.
            </summary>
        </member>
        <member name="M:formulate.app.Helpers.DefinitionHelper.GetTemplatePath(System.Nullable{System.Guid})">
            <summary>
            Gets the path to the template with the specified ID.
            </summary>
            <param name="templateId">
            The template ID.
            </param>
            <returns>
            The template path.
            </returns>
        </member>
        <member name="M:formulate.app.Helpers.DefinitionHelper.GetFormDefinition(System.Nullable{System.Guid})">
            <summary>
            Gets the form definition for the form with the specified ID.
            </summary>
            <param name="formId">
            The form ID.
            </param>
            <returns>
            The form definition.
            </returns>
        </member>
        <member name="M:formulate.app.Helpers.DefinitionHelper.GetLayoutDefinition(System.Nullable{System.Guid})">
            <summary>
            Gets the layout definition for the layout with the specified ID.
            </summary>
            <param name="layoutId">
            The layout ID.
            </param>
            <returns>
            The layout definition.
            </returns>
        </member>
        <member name="T:formulate.app.Helpers.EntityHelper">
            <summary>
            Helps with entities.
            </summary>
        </member>
        <member name="M:formulate.app.Helpers.EntityHelper.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:formulate.app.Helpers.EntityHelper.GetIconForRoot(System.Guid)">
            <summary>
            Gets the tree icon for the root entity with the specified ID.
            </summary>
            <param name="id">
            The root entity ID.
            </param>
            <returns>The icon.</returns>
        </member>
        <member name="M:formulate.app.Helpers.EntityHelper.GetGroupIconByRoot(System.Guid)">
            <summary>
            Gets the group tree icon for the entities under the root
            with the specified ID.
            </summary>
            <param name="id">
            The root entity ID.
            </param>
            <returns>
            The group icon.
            </returns>
        </member>
        <member name="M:formulate.app.Helpers.EntityHelper.GetNameForRoot(System.Guid)">
            <summary>
            Gets the name for the root entity with the specified ID.
            </summary>
            <param name="id">
            The root entity ID.
            </param>
            <returns>
            The entity name.
            </returns>
        </member>
        <member name="M:formulate.app.Helpers.EntityHelper.IsRoot(System.Guid)">
            <summary>
            Indicates whether or not the entity with the specified ID
            is a root entity.
            </summary>
            <param name="id">The entity ID.</param>
            <returns>
            True, if the entity is a root entity; otherwise, false.
            </returns>
        </member>
        <member name="M:formulate.app.Helpers.EntityHelper.GetString(formulate.app.Entities.EntityKind)">
            <summary>
            Converts an entity kind to a string.
            </summary>
            <param name="kind">The entity kind.</param>
            <returns>
            The entity kind string.
            </returns>
        </member>
        <member name="M:formulate.app.Helpers.EntityHelper.GetClientPath(System.Guid[])">
            <summary>
            Converts a server-side entity path to a client-side entity path.
            </summary>
            <param name="path">
            The server-side entity path.
            </param>
            <returns>
            The client-side entity path.
            </returns>
            <remarks>
            The client-side entity path expects an extra root ID of "-1",
            which this method includes.
            </remarks>
        </member>
        <member name="T:formulate.app.Helpers.GuidHelper">
            <summary>
            Helps with GUID operations.
            </summary>
        </member>
        <member name="M:formulate.app.Helpers.GuidHelper.GetString(System.Guid)">
            <summary>
            Converts a GUID to a string.
            </summary>
            <param name="guid">
            The GUID.
            </param>
            <returns>
            The string representation of the GUID.
            </returns>
            <remarks>
            This ensures all GUIDs are in the expected format.
            </remarks>
        </member>
        <member name="M:formulate.app.Helpers.GuidHelper.GetStrings(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Converts a GUID collection to an array of strings.
            </summary>
            <param name="guids">
            The GUID collection.
            </param>
            <returns>
            The string representations of the GUID's.
            </returns>
            <remarks>
            This ensures all GUIDs are in the expected format.
            </remarks>
        </member>
        <member name="M:formulate.app.Helpers.GuidHelper.GetGuid(System.String)">
            <summary>
            Converts a string GUID to a GUID instance.
            </summary>
            <param name="value">The string GUID.</param>
            <returns>
            The GUID instance, or the empty GUID.
            </returns>
            <remarks>
            This only parses GUIDs in the expected format.
            </remarks>
        </member>
        <member name="T:formulate.app.Helpers.JsonHelper">
            <summary>
            Helps with JSON operations.
            </summary>
        </member>
        <member name="M:formulate.app.Helpers.JsonHelper.Serialize(System.Object)">
            <summary>
            Serializes an object as JSON.
            </summary>
            <param name="item">The object to serialize.</param>
            <returns>
            The serialized object, or null.
            </returns>
        </member>
        <member name="M:formulate.app.Helpers.JsonHelper.Deserialize``1(System.String)">
            <summary>
            Deserializes a JSON string into an instance.
            </summary>
            <typeparam name="T">The type to deserialize to.</typeparam>
            <param name="value">The JSON value.</param>
            <returns>The instance, or the default for the type.</returns>
        </member>
        <member name="T:formulate.app.Helpers.LayoutHelper">
            <summary>
            Helps with operations related to layouts.
            </summary>
        </member>
        <member name="M:formulate.app.Helpers.LayoutHelper.GetAllLayoutKinds">
            <summary>
            Returns the layout kinds.
            </summary>
        </member>
        <member name="T:formulate.app.Helpers.LocalizationHelper">
            <summary>
            Assists with localization tasks (e.g., translating terms).
            </summary>
        </member>
        <member name="M:formulate.app.Helpers.LocalizationHelper.GetTreeName(System.String)">
            <summary>
            Gets the name of the specified tree in the current language.
            </summary>
            <param name="tree">
            The name of the tree.
            </param>
            <returns>
            The name of the tree in the current language.
            </returns>
        </member>
        <member name="M:formulate.app.Helpers.LocalizationHelper.GetDataValueName(System.String)">
            <summary>
            Gets the name of the specified data value in the current language.
            </summary>
            <param name="name">
            The name of the data value.
            </param>
            <returns>
            The name of the data value in the current language.
            </returns>
        </member>
        <member name="M:formulate.app.Helpers.LocalizationHelper.GetLayoutName(System.String)">
            <summary>
            Gets the name of the specified layout in the current language.
            </summary>
            <param name="name">
            The name of the layout.
            </param>
            <returns>
            The name of the layout in the current language.
            </returns>
        </member>
        <member name="M:formulate.app.Helpers.LocalizationHelper.GetMenuItemName(System.String)">
            <summary>
            Gets the name of the specified menu item in the current language.
            </summary>
            <param name="name">
            The name of the menu item.
            </param>
            <returns>
            The name of the menu item in the current language.
            </returns>
        </member>
        <member name="T:formulate.app.Helpers.ReflectionHelper">
            <summary>
            Helps with reflection operations.
            </summary>
        </member>
        <member name="M:formulate.app.Helpers.ReflectionHelper.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:formulate.app.Helpers.ReflectionHelper.InstantiateInterfaceImplementations``1">
            <summary>
            Instantiates all of the classes that implement the specified
            interface.
            </summary>
            <typeparam name="T">
            The interface type.
            </typeparam>
            <returns>
            An array of instances.
            </returns>
        </member>
        <member name="M:formulate.app.Helpers.ReflectionHelper.GetTypesImplementingInterface``1">
            <summary>
            Returns the types that implement an interface.
            </summary>
            <typeparam name="T">
            The interface type.
            </typeparam>
            <returns>
            The types.
            </returns>
        </member>
        <member name="M:formulate.app.Helpers.ReflectionHelper.SafelyGetTypes(System.Reflection.Assembly)">
            <summary>
            Safely returns the types in an assembly.
            </summary>
            <param name="assembly"></param>
            <returns>
            The array of types, or an empty array.
            </returns>
            <remarks>
            This is a workaround for an issue that happens when dependent assemblies
            are missing: https://github.com/rhythmagency/formulate/issues/70
            </remarks>
        </member>
        <member name="T:formulate.app.Helpers.SecurityHelper">
            <summary>
            Assists with operations related to security.
            </summary>
        </member>
        <member name="M:formulate.app.Helpers.SecurityHelper.GenerateAntiForgeryToken">
            <summary>
            Generates an anti-forgery token to be sent with a form submission using the name
            "__RequestVerificationToken".
            </summary>
            <returns>
            The token.
            </returns>
            <remarks>
            This will also read in and set the appropriate cookie tokens for the current request/response.
            </remarks>
        </member>
        <member name="T:formulate.app.Helpers.ValidationHelper">
            <summary>
            Helps with operations related to validations.
            </summary>
        </member>
        <member name="M:formulate.app.Helpers.ValidationHelper.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:formulate.app.Helpers.ValidationHelper.GetAllValidationKinds">
            <summary>
            Returns the validation kinds.
            </summary>
        </member>
        <member name="M:formulate.app.Helpers.ValidationHelper.ReplaceMessageTokens(System.String,formulate.app.Validations.ValidationContext)">
            <summary>
            Replaces the tokens in a validation message.
            </summary>
            <param name="message">
            The validation message.
            </param>
            <param name="context">
            The validation configuration deserialization context.
            </param>
            <returns>
            The transformed message.
            </returns>
        </member>
        <member name="T:formulate.app.Helpers.XmlHelper">
            <summary>
            Helps with XML.
            </summary>
        </member>
        <member name="M:formulate.app.Helpers.XmlHelper.GetAttributeValueFromNode(System.Xml.XmlNode,System.String)">
            <summary>
            Gets the value from an attribute (or returns an empty string if it wasn't specified).
            </summary>
        </member>
        <member name="M:formulate.app.Helpers.XmlHelper.GetAttributeValueFromNode(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Gets the value from an attribute (or returns defaultValue if it wasn't specified).
            </summary>
        </member>
        <member name="M:formulate.app.Helpers.XmlHelper.GetAttributeValueFromNode``1(System.Xml.XmlNode,System.String,``0)">
            <summary>
            Gets the value from an attribute. If no value or empty, it returns your default value (everything converted to the right type).
            </summary>
        </member>
        <member name="T:formulate.app.Install.Package_Actions.GrantPermissionToSection">
            <summary>
            Umbraco package action that grants permission to the specified
            section for the specified user.
            </summary>
            <remarks>
            If the specified username is "$CurrentUser", the current user
            will be used. If the specified username is "$AllUsers", all
            users will be used.
            </remarks>
        </member>
        <member name="M:formulate.app.Install.Package_Actions.GrantPermissionToSection.Alias">
            <summary>
            The alias of this package action.
            </summary>
            <returns>The alias to be used for this package action.</returns>
        </member>
        <member name="M:formulate.app.Install.Package_Actions.GrantPermissionToSection.Execute(System.String,System.Xml.XmlNode)">
            <summary>
            Grant permission.
            </summary>
            <param name="packageName">The package name.</param>
            <param name="xmlData">The XML data.</param>
            <returns>
            True, if execution was successful; otherwise, false.
            </returns>
        </member>
        <member name="M:formulate.app.Install.Package_Actions.GrantPermissionToSection.Undo(System.String,System.Xml.XmlNode)">
            <summary>
            Revokes permission.
            </summary>
            <param name="packageName">The package name.</param>
            <param name="xmlData">The XML data.</param>
            <returns>
            True, if execution was successful; otherwise, false.
            </returns>
        </member>
        <member name="M:formulate.app.Install.Package_Actions.GrantPermissionToSection.SampleXml">
            <summary>
            Sample XML that can be used to invoke this package action.
            </summary>
            <returns>The sample XML.</returns>
        </member>
        <member name="M:formulate.app.Install.Package_Actions.GrantPermissionToSection.GetSectionNameFromXml(System.Xml.XmlNode)">
            <summary>
            Gets the name for the section to grant permission to from
            the specified XML.
            </summary>
            <param name="xmlData">The XML data.</param>
            <returns>The section name.</returns>
        </member>
        <member name="M:formulate.app.Install.Package_Actions.GrantPermissionToSection.GetUsernameFromXml(System.Xml.XmlNode)">
            <summary>
            Gets the username to grant permission to.
            </summary>
            <param name="xmlData">The XML data.</param>
            <returns>The username.</returns>
        </member>
        <member name="M:formulate.app.Install.Package_Actions.GrantPermissionToSection.GetAttributeValue(System.Xml.XmlNode,System.String)">
            <summary>
            Gets the value of the specified attribute from the
            specified XML.
            </summary>
            <param name="xmlData">The XML data.</param>
            <param name="attributeName">The attribute name.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:formulate.app.Install.Package_Actions.GrantPermissionToSection.Grant(System.Xml.XmlNode)">
            <summary>
            Grants the user permission to the section.
            </summary>
            <param name="xmlData">The XML data.</param>
            <returns>
            True, if permission was granted; otherwise false.
            </returns>
        </member>
        <member name="M:formulate.app.Install.Package_Actions.GrantPermissionToSection.Revoke(System.Xml.XmlNode)">
            <summary>
            Revokes permission to the section from the user.
            </summary>
            <param name="xmlData">The XML data.</param>
            <returns>
            True, if permission was revoked; otherwise, false.
            </returns>
        </member>
        <member name="M:formulate.app.Install.Package_Actions.GrantPermissionToSection.Toggle(System.Xml.XmlNode,System.Boolean)">
            <summary>
            Toggles the user's permission for the section indicated
            by the specified XML.
            </summary>
            <param name="xmlData">The XML data.</param>
            <param name="grant">
            If true, permission will be granted to the section; otherwise,
            permission will be revoked.
            </param>
            <returns>
            True, if the toggle was successful; otherwise, false.
            </returns>
        </member>
        <member name="M:formulate.app.Install.Package_Actions.GrantPermissionToSection.GetUsersFromConfig(System.Xml.XmlNode)">
            <summary>
            Gets the users specified in the XML config.
            </summary>
            <param name="xmlData">The XML data.</param>
            <returns>
            The users.
            </returns>
        </member>
        <member name="M:formulate.app.Install.Package_Actions.GrantPermissionToSection.GetCurrentUser">
            <summary>
            Gets the currently logged in user.
            </summary>
            <returns>The current user.</returns>
        </member>
        <member name="M:formulate.app.Install.Package_Actions.GrantPermissionToSection.UsernameIsCurrentUserPlaceHolder(System.String)">
            <summary>
            Indicates whether or not the specified username is a
            special placeholder indicating that the current user
            should be used.
            </summary>
            <param name="username">The username.</param>
            <returns>
            True, if the placeholder is detected; otherwise, false.
            </returns>
        </member>
        <member name="M:formulate.app.Install.Package_Actions.GrantPermissionToSection.UsernameIsAllUsersPlaceholder(System.String)">
            <summary>
            Indicates whether or not the specified username is a
            special placeholder indicating that all users should
            be used.
            </summary>
            <param name="username">The username.</param>
            <returns>
            True, if the placeholder is detected; otherwise, false.
            </returns>
        </member>
        <member name="T:formulate.app.Install.Package_Actions.TransformXmlFile">
            <summary>
            Umbraco package action that transforms an XML file.
            </summary>
        </member>
        <member name="M:formulate.app.Install.Package_Actions.TransformXmlFile.Alias">
            <summary>
            The alias of this package action.
            </summary>
            <returns>
            The alias to be used for this package action.
            </returns>
        </member>
        <member name="M:formulate.app.Install.Package_Actions.TransformXmlFile.SampleXml">
            <summary>
            Sample XML that can be used to invoke this package action.
            </summary>
            <returns>The sample XML.</returns>
        </member>
        <member name="M:formulate.app.Install.Package_Actions.TransformXmlFile.Execute(System.String,System.Xml.XmlNode)">
            <summary>
            Transforms the XML file with the install transformation.
            </summary>
            <param name="packageName">
            The package name.
            </param>
            <param name="xmlData">
            The package action XML data.
            </param>
            <returns>
            True, if execution was successful; otherwise, false.
            </returns>
        </member>
        <member name="M:formulate.app.Install.Package_Actions.TransformXmlFile.Undo(System.String,System.Xml.XmlNode)">
            <summary>
            Transforms the XML file with the uninstall transformation.
            </summary>
            <param name="packageName">
            The package name.
            </param>
            <param name="xmlData">
            The package action XML data.
            </param>
            <returns>
            True, if execution was successful; otherwise, false.
            </returns>
        </member>
        <member name="M:formulate.app.Install.Package_Actions.TransformXmlFile.Transform(System.Xml.XmlNode,System.Boolean)">
            <summary>
            Transforms the XML file.
            </summary>
            <param name="xmlData">
            The package action XML.
            </param>
            <param name="install">
            Install or uninstall?
            </param>
        </member>
        <member name="M:formulate.app.Install.Package_Actions.TransformXmlFile.GetAttributeValue(System.Xml.XmlNode,System.String)">
            <summary>
            Gets the value of the specified attribute from the
            specified XML.
            </summary>
            <param name="xmlData">The XML data.</param>
            <param name="attributeName">The attribute name.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:formulate.app.Layouts.ILayoutKind">
            <summary>
            Classes that implement this are the kinds of layouts that
            can be created.
            </summary>
        </member>
        <member name="T:formulate.app.Layouts.Kinds.Basic.LayoutBasic">
            <summary>
            A layout kind that gives basic layout options.
            </summary>
        </member>
        <member name="P:formulate.app.Layouts.Kinds.Basic.LayoutBasic.Id">
            <summary>
            The kind ID.
            </summary>
        </member>
        <member name="P:formulate.app.Layouts.Kinds.Basic.LayoutBasic.Name">
            <summary>
            The kind name.
            </summary>
        </member>
        <member name="P:formulate.app.Layouts.Kinds.Basic.LayoutBasic.Directive">
            <summary>
            The kind directive.
            </summary>
        </member>
        <member name="M:formulate.app.Layouts.Kinds.Basic.LayoutBasic.DeserializeConfiguration(System.String)">
            <summary>
            Deserializes the layout.
            </summary>
            <param name="configuration">
            The serialized layout data.
            </param>
            <returns>
            The deserialized layout.
            </returns>
        </member>
        <member name="M:formulate.app.Layouts.Kinds.Basic.LayoutBasic.TryGetColumnSpan(System.Object)">
            <summary>
            Attempts to extract the column span from cell data.
            </summary>
            <param name="cellData">
            The cell data to attempt to extract the column span from.
            </param>
            <remarks>
            This method will eventually be deleted.
            </remarks>
        </member>
        <member name="M:formulate.app.Layouts.Kinds.Basic.LayoutBasic.SetFallbackColumnSpans(System.Collections.Generic.List{formulate.app.Layouts.Kinds.Basic.LayoutCell})">
            <summary>
            Fallback to a calculated column span when one is not otherwise specified.
            </summary>
            <param name="cells">
            The cells to set fallback column spans on.
            </param>
            <remarks>
            This method will eventually be deleted.
            </remarks>
        </member>
        <member name="T:formulate.app.Layouts.Kinds.Basic.LayoutBasicConfiguration">
            <summary>
            The configuration for a basic layout.
            </summary>
        </member>
        <member name="P:formulate.app.Layouts.Kinds.Basic.LayoutBasicConfiguration.Rows">
            <summary>
            The rows in this layout.
            </summary>
        </member>
        <member name="T:formulate.app.Layouts.Kinds.Basic.LayoutCell">
            <summary>
            A cell in a layout row.
            </summary>
        </member>
        <member name="P:formulate.app.Layouts.Kinds.Basic.LayoutCell.ColumnSpan">
            <summary>
            The number of columns this cell spans.
            </summary>
        </member>
        <member name="P:formulate.app.Layouts.Kinds.Basic.LayoutCell.Fields">
            <summary>
            The fields in this cell.
            </summary>
        </member>
        <member name="T:formulate.app.Layouts.Kinds.Basic.LayoutField">
            <summary>
            A field in a layout row cell.
            </summary>
        </member>
        <member name="P:formulate.app.Layouts.Kinds.Basic.LayoutField.FieldId">
            <summary>
            The ID of this field.
            </summary>
        </member>
        <member name="T:formulate.app.Layouts.Kinds.Basic.LayoutRow">
            <summary>
            A row in a layout.
            </summary>
        </member>
        <member name="P:formulate.app.Layouts.Kinds.Basic.LayoutRow.Cells">
            <summary>
            The cells in this row.
            </summary>
        </member>
        <member name="T:formulate.app.Layouts.Layout">
            <summary>
            A form layout.
            </summary>
        </member>
        <member name="P:formulate.app.Layouts.Layout.KindId">
            <summary>
            The ID of the type of layout.
            </summary>
        </member>
        <member name="P:formulate.app.Layouts.Layout.Id">
            <summary>
            The unique ID of this layout.
            </summary>
        </member>
        <member name="P:formulate.app.Layouts.Layout.Path">
            <summary>
            The entity path to this layout.
            </summary>
            <remarks>
            This path excludes the root, but includes the layout ID.
            </remarks>
        </member>
        <member name="P:formulate.app.Layouts.Layout.Alias">
            <summary>
            The alias of this layout.
            </summary>
        </member>
        <member name="P:formulate.app.Layouts.Layout.Name">
            <summary>
            The name of this layout.
            </summary>
        </member>
        <member name="P:formulate.app.Layouts.Layout.Icon">
            <summary>
            The icon for layouts.
            </summary>
        </member>
        <member name="P:formulate.app.Layouts.Layout.Kind">
            <summary>
            The kind of this entity.
            </summary>
        </member>
        <member name="P:formulate.app.Layouts.Layout.Data">
            <summary>
            The data stored by this layout.
            </summary>
        </member>
        <member name="M:formulate.app.Layouts.Layout.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:formulate.app.Layouts.Layout.DeserializeConfiguration">
            <summary>
            Deserializes the layout configuration.
            </summary>
            <param name="configuration">
            The serialized layout configuration.
            </param>
            <returns>
            The deserialized configuration.
            </returns>
        </member>
        <member name="M:formulate.app.Layouts.Layout.GetLayoutKind">
            <summary>
            Gets the layout kind.
            </summary>
            <returns>
            The layout kind.
            </returns>
        </member>
        <member name="T:formulate.app.Managers.DefaultConfigurationManager">
            <summary>
            The default configuration manager.
            </summary>
        </member>
        <member name="P:formulate.app.Managers.DefaultConfigurationManager.JsonBasePath">
            <summary>
            The base path to store JSON in.
            </summary>
        </member>
        <member name="P:formulate.app.Managers.DefaultConfigurationManager.FileStoreBasePath">
            <summary>
            The base path toe store submitted files in.
            </summary>
        </member>
        <member name="P:formulate.app.Managers.DefaultConfigurationManager.Templates">
            <summary>
            The templates used to render forms.
            </summary>
        </member>
        <member name="P:formulate.app.Managers.DefaultConfigurationManager.ButtonKinds">
            <summary>
            The button kinds used when creating button field types.
            </summary>
        </member>
        <member name="P:formulate.app.Managers.DefaultConfigurationManager.EnableServerSideValidation">
            <summary>
            Enable server side validation of form submissions?
            </summary>
        </member>
        <member name="P:formulate.app.Managers.DefaultConfigurationManager.EnableEmailWhitelist">
            <summary>
            Is the email whitelist enabled?
            </summary>
        </member>
        <member name="P:formulate.app.Managers.DefaultConfigurationManager.EmailWhitelist">
            <summary>
            The emails to whitelist.
            </summary>
        </member>
        <member name="P:formulate.app.Managers.DefaultConfigurationManager.FieldCategories">
            <summary>
            The field categories
            </summary>
        </member>
        <member name="T:formulate.app.Managers.IConfigurationManager">
            <summary>
            Manages Formulate's configuration values.
            </summary>
        </member>
        <member name="P:formulate.app.Managers.IConfigurationManager.JsonBasePath">
            <summary>
            The root directory to store JSON in.
            </summary>
        </member>
        <member name="P:formulate.app.Managers.IConfigurationManager.FileStoreBasePath">
            <summary>
            The root directory to store submitted files in.
            </summary>
        </member>
        <member name="P:formulate.app.Managers.IConfigurationManager.Templates">
            <summary>
            The templates (i.e., CSHTML files).
            </summary>
        </member>
        <member name="P:formulate.app.Managers.IConfigurationManager.ButtonKinds">
            <summary>
            The button kinds used when creating button field types.
            </summary>
        </member>
        <member name="P:formulate.app.Managers.IConfigurationManager.EnableServerSideValidation">
            <summary>
            Enable server side validation of form submissions?
            </summary>
        </member>
        <member name="P:formulate.app.Managers.IConfigurationManager.EnableEmailWhitelist">
            <summary>
            Is the email whitelist enabled?
            </summary>
        </member>
        <member name="P:formulate.app.Managers.IConfigurationManager.EmailWhitelist">
            <summary>
            The emails to whitelist.
            </summary>
        </member>
        <member name="P:formulate.app.Managers.IConfigurationManager.FieldCategories">
            <summary>
            The field categories used for flagging field types.
            </summary>
        </member>
        <member name="P:formulate.app.Models.Requests.GetCsvExportRequest.FormId">
            <summary>
            The ID of the form to export to a CSV.
            </summary>
        </member>
        <member name="P:formulate.app.Models.Requests.GetFileDownloadRequest.PathSegment">
            <summary>
            The path segment used to store the file.
            </summary>
        </member>
        <member name="P:formulate.app.Models.Requests.GetFileDownloadRequest.Filename">
            <summary>
            The filename to use when downloading the file.
            </summary>
        </member>
        <member name="P:formulate.app.Models.Requests.GetStoredDataRequest.FormId">
            <summary>
            The ID of the form to get data for.
            </summary>
        </member>
        <member name="P:formulate.app.Models.Requests.GetStoredDataRequest.Page">
            <summary>
            The page of data to fetch (starts at 1).
            </summary>
        </member>
        <member name="P:formulate.app.Models.Requests.GetStoredDataRequest.ItemsPerPage">
            <summary>
            The number of items each page of data should contain.
            </summary>
        </member>
        <member name="P:formulate.app.Models.Requests.GetStoredDataRequest.TimezoneOffset">
            <summary>
            The timezone offset from UTC, in minutes. For California, this might be 480, depending
            on daylight saving time.
            </summary>
        </member>
        <member name="T:formulate.app.Persistence.IDataValuePersistence">
            <summary>
            Interface for persistence of data values.
            </summary>
        </member>
        <member name="T:formulate.app.Persistence.IEntityPersistence">
            <summary>
            Interface for persistence of entities.
            </summary>
        </member>
        <member name="T:formulate.app.Persistence.IFolderPersistence">
            <summary>
            Interface for persistence of folders.
            </summary>
        </member>
        <member name="T:formulate.app.Persistence.IConfiguredFormPersistence">
            <summary>
            Interface for persistence of configured forms.
            </summary>
        </member>
        <member name="T:formulate.app.Persistence.Internal.JsonDataValuePersistence">
            <summary>
            Handles persistence of data values to JSON on the file system.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.JsonDataValuePersistence.Helper">
            <summary>
            A helper for JSON operations.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.JsonDataValuePersistence.Config">
            <summary>
            Configuration manager.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.JsonDataValuePersistence.BasePath">
            <summary>
            The base path to store data values in.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.JsonDataValuePersistence.Extension">
            <summary>
            The file extension used by data value files.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.JsonDataValuePersistence.WildcardPattern">
            <summary>
            The wildcard pattern used to find data value files.
            </summary>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonDataValuePersistence.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonDataValuePersistence.Persist(formulate.app.DataValues.DataValue)">
            <summary>
            Persists a data value to the file system.
            </summary>
            <param name="dataValue">The data value to persist.</param>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonDataValuePersistence.Delete(System.Guid)">
            <summary>
            Deletes the specified data value.
            </summary>
            <param name="dataValueId">The ID of the data value to delete.</param>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonDataValuePersistence.Delete(System.String)">
            <summary>
            Deletes the data value with the specified alias.
            </summary>
            <param name="dataValueAlias">
            The alias of the data value to delete.
            </param>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonDataValuePersistence.Retrieve(System.Guid)">
            <summary>
            Gets the data value with the specified ID.
            </summary>
            <param name="dataValueId">
            The ID of the data value.
            </param>
            <returns>
            The data value.
            </returns>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonDataValuePersistence.Retrieve(System.String)">
            <summary>
            Gets the data value with the specified alias.
            </summary>
            <param name="dataValueAlias">The alias of the data value.</param>
            <returns>
            The data value.
            </returns>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonDataValuePersistence.RetrieveChildren(System.Nullable{System.Guid})">
            <summary>
            Gets all the data values that are the children of the
            folder with the specified ID.
            </summary>
            <param name="parentId">The parent ID.</param>
            <returns>
            The data values.
            </returns>
            <remarks>
            You can specify a parent ID of null to get the root data values.
            </remarks>
        </member>
        <member name="T:formulate.app.Persistence.Internal.JsonConfiguredFormPersistence">
            <summary>
            Handles persistence of configured forms to JSON on the file system.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.JsonConfiguredFormPersistence.Helper">
            <summary>
            A helper for JSON operations.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.JsonConfiguredFormPersistence.Config">
            <summary>
            Configuration manager.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.JsonConfiguredFormPersistence.BasePath">
            <summary>
            The base path to store configured forms in.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.JsonConfiguredFormPersistence.Extension">
            <summary>
            The file extension used by configured form files.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.JsonConfiguredFormPersistence.WildcardPattern">
            <summary>
            The wildcard pattern used to find configured form files.
            </summary>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonConfiguredFormPersistence.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonConfiguredFormPersistence.Persist(formulate.app.Forms.ConfiguredForm)">
            <summary>
            Persists a configured form to the file system.
            </summary>
            <param name="configuredForm">The configured form to persist.</param>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonConfiguredFormPersistence.Delete(System.Guid)">
            <summary>
            Deletes the specified configured form.
            </summary>
            <param name="configuredFormId">The ID of the configured form to delete.</param>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonConfiguredFormPersistence.Delete(System.String)">
            <summary>
            Deletes the configured form with the specified alias.
            </summary>
            <param name="configuredFormAlias">The alias of the configured form to delete.</param>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonConfiguredFormPersistence.Retrieve(System.Guid)">
            <summary>
            Gets the configured form with the specified ID.
            </summary>
            <param name="configuredFormId">The ID of the configured form.</param>
            <returns>
            The configured form.
            </returns>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonConfiguredFormPersistence.Retrieve(System.String)">
            <summary>
            Gets the configured form with the specified alias.
            </summary>
            <param name="configuredFormAlias">The alias of the configured form.</param>
            <returns>
            The configured form.
            </returns>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonConfiguredFormPersistence.RetrieveChildren(System.Guid)">
            <summary>
            Gets all the configured forms that are the children of the folder with the specified ID.
            </summary>
            <param name="parentId">The parent ID.</param>
            <returns>
            The configured forms.
            </returns>
        </member>
        <member name="T:formulate.app.Persistence.Internal.JsonValidationPersistence">
            <summary>
            Handles persistence of form validations to JSON on the file system.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.JsonValidationPersistence.Helper">
            <summary>
            A helper for JSON operations.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.JsonValidationPersistence.Config">
            <summary>
            Configuration manager.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.JsonValidationPersistence.BasePath">
            <summary>
            The base path to store validations in.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.JsonValidationPersistence.Extension">
            <summary>
            The file extension used by validation files.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.JsonValidationPersistence.WildcardPattern">
            <summary>
            The wildcard pattern used to find validation files.
            </summary>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonValidationPersistence.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonValidationPersistence.Persist(formulate.app.Validations.Validation)">
            <summary>
            Persists a validation to the file system.
            </summary>
            <param name="validation">The validation to persist.</param>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonValidationPersistence.Delete(System.Guid)">
            <summary>
            Deletes the specified validation.
            </summary>
            <param name="validationId">
            The ID of the validation to delete.
            </param>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonValidationPersistence.Delete(System.String)">
            <summary>
            Deletes the validation with the specified alias.
            </summary>
            <param name="validationAlias">
            The alias of the validation to delete.
            </param>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonValidationPersistence.Retrieve(System.Guid)">
            <summary>
            Gets the validation with the specified ID.
            </summary>
            <param name="validationId">The ID of the validation.</param>
            <returns>
            The validation.
            </returns>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonValidationPersistence.Retrieve(System.String)">
            <summary>
            Gets the validation with the specified alias.
            </summary>
            <param name="validationAlias">The alias of the validation.</param>
            <returns>
            The validation.
            </returns>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonValidationPersistence.RetrieveChildren(System.Nullable{System.Guid})">
            <summary>
            Gets all the validations that are the children of the
            folder with the specified ID.
            </summary>
            <param name="parentId">The parent ID.</param>
            <returns>
            The validations.
            </returns>
            <remarks>
            You can specify a parent ID of null to get the root validations.
            </remarks>
        </member>
        <member name="T:formulate.app.Persistence.Internal.Sql.Models.FormulateSubmission">
            <summary>
            Model for the submissions database table.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.Sql.Models.FormulateSubmission.SequenceId">
            <summary>
            The sequential ID.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.Sql.Models.FormulateSubmission.GeneratedId">
            <summary>
            The ID generated for the submission outside of the database.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.Sql.Models.FormulateSubmission.CreationDate">
            <summary>
            The date the submission was created.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.Sql.Models.FormulateSubmission.FormId">
            <summary>
            The ID of the form the submission is for.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.Sql.Models.FormulateSubmission.DataValues">
            <summary>
            The data values.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.Sql.Models.FormulateSubmission.FileValues">
            <summary>
            The file values.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.Sql.Models.FormulateSubmission.Url">
            <summary>
            The URL the form was submitted from.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.Sql.Models.FormulateSubmission.PageId">
            <summary>
            The ID of the page the form was submitted from.
            </summary>
        </member>
        <member name="T:formulate.app.Persistence.Internal.DefaultEntityPersistence">
            <summary>
            Handles persistence of entities.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.DefaultEntityPersistence.Folders">
            <summary>
            Folder persistence.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.DefaultEntityPersistence.Forms">
            <summary>
            Form persistence.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.DefaultEntityPersistence.ConfiguredForms">
            <summary>
            Configured form persistence.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.DefaultEntityPersistence.Layouts">
            <summary>
            Layout persistence.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.DefaultEntityPersistence.Validations">
            <summary>
            Validation persistence.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.DefaultEntityPersistence.DataValues">
            <summary>
            Layout persistence.
            </summary>
        </member>
        <member name="M:formulate.app.Persistence.Internal.DefaultEntityPersistence.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:formulate.app.Persistence.Internal.DefaultEntityPersistence.Retrieve(System.Guid)">
            <summary>
            Gets the entity with the specified ID.
            </summary>
            <param name="entityId">The ID of the entity.</param>
            <returns>
            The entity.
            </returns>
        </member>
        <member name="M:formulate.app.Persistence.Internal.DefaultEntityPersistence.RetrieveChildren(System.Nullable{System.Guid})">
            <summary>
            Gets all the entities that are the children of the folder with the specified ID.
            </summary>
            <param name="parentId">The parent ID.</param>
            <returns>
            The entities.
            </returns>
            <remarks>
            You can specify a parent ID of null to get the root entities.
            </remarks>
        </member>
        <member name="M:formulate.app.Persistence.Internal.DefaultEntityPersistence.RetrieveDescendants(System.Guid)">
            <summary>
            Gets all the entities that are the descendants of the folder with the specified ID.
            </summary>
            <param name="parentId">The parent ID.</param>
            <returns>
            The entities.
            </returns>
        </member>
        <member name="M:formulate.app.Persistence.Internal.DefaultEntityPersistence.MoveEntity(formulate.app.Entities.IEntity,System.Guid[])">
            <summary>
            Moves the specified entity under the parent at the specified path.
            </summary>
            <param name="entity">
            The entity to move.
            </param>
            <param name="parentPath">
            The path to the new parent.
            </param>
            <returns>
            The new path.
            </returns>
        </member>
        <member name="M:formulate.app.Persistence.Internal.DefaultEntityPersistence.DeleteEntity(formulate.app.Entities.IEntity)">
            <summary>
            Deletes the specified entity.
            </summary>
            <param name="entity">
            The entity to delete.
            </param>
        </member>
        <member name="T:formulate.app.Persistence.Internal.JsonFolderPersistence">
            <summary>
            Handles persistence of folders to JSON on the file system.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.JsonFolderPersistence.Helper">
            <summary>
            A helper for JSON operations.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.JsonFolderPersistence.Config">
            <summary>
            Configuration manager.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.JsonFolderPersistence.BasePath">
            <summary>
            The base path to store foldes in.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.JsonFolderPersistence.Extension">
            <summary>
            The file extension used by folder files.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.JsonFolderPersistence.WildcardPattern">
            <summary>
            The wildcard pattern used to find folder files.
            </summary>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonFolderPersistence.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonFolderPersistence.Persist(formulate.app.Folders.Folder)">
            <summary>
            Persists a folder to the file system.
            </summary>
            <param name="folder">The folder to persist.</param>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonFolderPersistence.Retrieve(System.Guid)">
            <summary>
            Gets the folder with the specified ID.
            </summary>
            <param name="folderId">The ID of the folder.</param>
            <returns>
            The folder.
            </returns>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonFolderPersistence.RetrieveChildren(System.Nullable{System.Guid})">
            <summary>
            Gets all the folders that are the children of the folder
            with the specified ID.
            </summary>
            <param name="parentId">The parent ID.</param>
            <returns>
            The folders.
            </returns>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonFolderPersistence.Delete(System.Guid)">
            <summary>
            Deletes the specified folder.
            </summary>
            <param name="folderId">The ID of the folder to delete.</param>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonFolderPersistence.SetIcons(formulate.app.Folders.Folder[])">
            <summary>
            Sets the icons for each folder.
            </summary>
            <param name="folders">
            The folders to set the icons for.
            </param>
            <remarks>
            All supplied folders are assumed to have the same icon
            (i.e., they are assumed to be in the same sub-tree).
            </remarks>
        </member>
        <member name="T:formulate.app.Persistence.Internal.JsonPersistenceHelper">
            <summary>
            Helps with JSON persistence.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.JsonPersistenceHelper.BasePath">
            <summary>
            The base folder path to store files in.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.JsonPersistenceHelper.Extension">
            <summary>
            The file extension to store files with.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.JsonPersistenceHelper.WildcardPattern">
            <summary>
            The wildcard pattern used to find entity files.
            </summary>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonPersistenceHelper.#ctor(System.String,System.String,System.String)">
            <summary>
            Full constructor.
            </summary>
            <param name="basePath">The base path to store files in.</param>
            <param name="extension">The extension to store files with.</param>
            <param name="wildcard">
            The wildcard pattern that can be used to find entity files.
            </param>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonPersistenceHelper.WriteFile(System.String,System.String)">
            <summary>
            Writes the specified file at the specified path.
            </summary>
            <param name="path">The path of the file.</param>
            <param name="contents">The contents of the file.</param>
            <remarks>
            Will ensure the folder exists before attempting to write to the file.
            </remarks>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonPersistenceHelper.GetFileContents(System.String)">
            <summary>
            Gets the contents of the file at the specified path.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>
            The file contents, or null.
            </returns>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonPersistenceHelper.GetEntityPath(System.Guid)">
            <summary>
            Gets the file path to the entity with the specified ID.
            </summary>
            <param name="entityId">The entity's ID.</param>
            <returns>The file to the entity's file.</returns>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonPersistenceHelper.EnsurePathExists(System.String)">
            <summary>
            Ensures that the specified path exists.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonPersistenceHelper.Persist(System.Guid,System.Object)">
            <summary>
            Persists a entity to the file system.
            </summary>
            <param name="entityId">The ID of the entity.</param>
            <param name="entity">The entity to persist.</param>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonPersistenceHelper.Delete(System.Guid)">
            <summary>
            Deletes the specified entity.
            </summary>
            <param name="entityId">The ID of the entity to delete.</param>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonPersistenceHelper.Retrieve``1(System.Guid)">
            <summary>
            Gets the entity with the specified ID.
            </summary>
            <param name="entityId">The ID of the entity.</param>
            <returns>
            The entity.
            </returns>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonPersistenceHelper.RetrieveChildren``1(System.Nullable{System.Guid})">
            <summary>
            Gets all the entities that are the children of the folder with the specified ID.
            </summary>
            <param name="parentId">The parent ID.</param>
            <returns>
            The entities.
            </returns>
            <remarks>
            You can specify a parent ID of null to get the root entities.
            </remarks>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonPersistenceHelper.RetrieveAll``1">
            <summary>
            Gets all entities of the specified type.
            </summary>
            <typeparam name="EntityType">
            The type of entity.
            </typeparam>
            <returns>
            The entities.
            </returns>
        </member>
        <member name="T:formulate.app.Persistence.Internal.JsonLayoutPersistence">
            <summary>
            Handles persistence of form layouts to JSON on the file system.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.JsonLayoutPersistence.Helper">
            <summary>
            A helper for JSON operations.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.JsonLayoutPersistence.Config">
            <summary>
            Configuration manager.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.JsonLayoutPersistence.BasePath">
            <summary>
            The base path to store layouts in.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.JsonLayoutPersistence.Extension">
            <summary>
            The file extension used by layout files.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.JsonLayoutPersistence.WildcardPattern">
            <summary>
            The wildcard pattern used to find layout files.
            </summary>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonLayoutPersistence.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonLayoutPersistence.Persist(formulate.app.Layouts.Layout)">
            <summary>
            Persists a layout to the file system.
            </summary>
            <param name="layout">The layout to persist.</param>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonLayoutPersistence.Delete(System.Guid)">
            <summary>
            Deletes the specified layout.
            </summary>
            <param name="layoutId">The ID of the layout to delete.</param>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonLayoutPersistence.Delete(System.String)">
            <summary>
            Deletes the layout with the specified alias.
            </summary>
            <param name="layoutAlias">The alias of the layout to delete.</param>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonLayoutPersistence.Retrieve(System.Guid)">
            <summary>
            Gets the layout with the specified ID.
            </summary>
            <param name="layoutId">The ID of the layout.</param>
            <returns>
            The layout.
            </returns>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonLayoutPersistence.Retrieve(System.String)">
            <summary>
            Gets the layout with the specified alias.
            </summary>
            <param name="layoutAlias">The alias of the layout.</param>
            <returns>
            The layout.
            </returns>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonLayoutPersistence.RetrieveChildren(System.Nullable{System.Guid})">
            <summary>
            Gets all the layouts that are the children of the folder with the specified ID.
            </summary>
            <param name="parentId">The parent ID.</param>
            <returns>
            The layouts.
            </returns>
            <remarks>
            You can specify a parent ID of null to get the root layouts.
            </remarks>
        </member>
        <member name="T:formulate.app.Persistence.Internal.JsonFormPersistence">
            <summary>
            Handles persistence of forms to JSON on the file system.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.JsonFormPersistence.Helper">
            <summary>
            A helper for JSON operations.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.JsonFormPersistence.Config">
            <summary>
            Configuration manager.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.JsonFormPersistence.BasePath">
            <summary>
            The base path to store forms in.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.JsonFormPersistence.Extension">
            <summary>
            The file extension used by form files.
            </summary>
        </member>
        <member name="P:formulate.app.Persistence.Internal.JsonFormPersistence.WildcardPattern">
            <summary>
            The wildcard pattern used to find form files.
            </summary>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonFormPersistence.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonFormPersistence.Persist(formulate.app.Forms.Form)">
            <summary>
            Persists a form to the file system.
            </summary>
            <param name="form">The form to persist.</param>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonFormPersistence.Delete(System.Guid)">
            <summary>
            Deletes the specified form.
            </summary>
            <param name="formId">The ID of the form to delete.</param>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonFormPersistence.Delete(System.String)">
            <summary>
            Deletes the form with the specified alias.
            </summary>
            <param name="formAlias">The alias of the form to delete.</param>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonFormPersistence.Retrieve(System.Guid)">
            <summary>
            Gets the form with the specified ID.
            </summary>
            <param name="formId">The ID of the form.</param>
            <returns>
            The form.
            </returns>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonFormPersistence.Retrieve(System.String)">
            <summary>
            Gets the form with the specified alias.
            </summary>
            <param name="formAlias">The alias of the form.</param>
            <returns>
            The form.
            </returns>
        </member>
        <member name="M:formulate.app.Persistence.Internal.JsonFormPersistence.RetrieveChildren(System.Nullable{System.Guid})">
            <summary>
            Gets all the forms that are the children of the folder
            with the specified ID.
            </summary>
            <param name="parentId">The parent ID.</param>
            <returns>
            The forms.
            </returns>
            <remarks>
            You can specify a parent ID of null to get the root forms.
            </remarks>
        </member>
        <member name="T:formulate.app.Persistence.IValidationPersistence">
            <summary>
            Interface for persistence of validations.
            </summary>
        </member>
        <member name="T:formulate.app.Persistence.ILayoutPersistence">
            <summary>
            Interface for persistence of layouts.
            </summary>
        </member>
        <member name="T:formulate.app.Persistence.IFormPersistence">
            <summary>
            Interface for persistence of forms.
            </summary>
        </member>
        <member name="T:formulate.app.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:formulate.app.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:formulate.app.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:formulate.app.Properties.Resources.FormulateTab">
             <summary>
               Looks up a localized string similar to &lt;tab caption=&quot;Formulate&quot;&gt;
                &lt;control&gt;/App_Plugins/formulate/dashboards/install.html&lt;/control&gt;
            &lt;/tab&gt;.
             </summary>
        </member>
        <member name="P:formulate.app.Properties.Resources.GrantAllUsersPermissionToSection">
            <summary>
              Looks up a localized string similar to &lt;Action runat=&quot;install&quot; undo=&quot;false&quot; alias=&quot;Formulate.GrantPermissionToSection&quot; username=&quot;$AllUsers&quot; sectionName=&quot;formulate&quot; /&gt;.
            </summary>
        </member>
        <member name="P:formulate.app.Properties.Resources.GrantPermissionToSection">
            <summary>
              Looks up a localized string similar to &lt;Action runat=&quot;install&quot; undo=&quot;false&quot; alias=&quot;Formulate.GrantPermissionToSection&quot; username=&quot;$CurrentUser&quot; sectionName=&quot;formulate&quot; /&gt;.
            </summary>
        </member>
        <member name="P:formulate.app.Properties.Resources.TransformApplications">
            <summary>
              Looks up a localized string similar to &lt;Action runat=&quot;install&quot; undo=&quot;false&quot; alias=&quot;Formulate.TransformXmlFile&quot;
             installTransform=&quot;~/App_Plugins/formulate/Transforms/applications.config.install.xdt.txt&quot;
             uninstallTransform=&quot;~/App_Plugins/formulate/Transforms/applications.config.uninstall.xdt.txt&quot;
             file=&quot;~/Config/applications.config&quot; /&gt;.
            </summary>
        </member>
        <member name="P:formulate.app.Properties.Resources.TransformDashboard">
            <summary>
              Looks up a localized string similar to &lt;Action runat=&quot;install&quot; undo=&quot;false&quot; alias=&quot;Formulate.TransformXmlFile&quot;
             installTransform=&quot;~/App_Plugins/formulate/Transforms/dashboard.config.install.xdt.txt&quot;
             uninstallTransform=&quot;~/App_Plugins/formulate/Transforms/dashboard.config.uninstall.xdt.txt&quot;
             file=&quot;~/Config/Dashboard.config&quot; /&gt;.
            </summary>
        </member>
        <member name="P:formulate.app.Properties.Resources.TransformWebConfig">
            <summary>
              Looks up a localized string similar to &lt;Action runat=&quot;install&quot; undo=&quot;false&quot; alias=&quot;Formulate.TransformXmlFile&quot;
             installTransform=&quot;~/App_Plugins/formulate/Transforms/web.config.install.xdt.txt&quot;
             uninstallTransform=&quot;~/App_Plugins/formulate/Transforms/web.config.uninstall.xdt.txt&quot;
             file=&quot;~/Web.config&quot; /&gt;.
            </summary>
        </member>
        <member name="T:formulate.app.Resolvers.Configuration">
            <summary>
            The resolver for the configuration manager.
            </summary>
        </member>
        <member name="P:formulate.app.Resolvers.Configuration.Manager">
            <summary>
            Gets the configuration manager.
            </summary>
        </member>
        <member name="M:formulate.app.Resolvers.Configuration.#ctor(formulate.app.Managers.IConfigurationManager)">
            <summary>
            Primary constructor.
            </summary>
            <param name="manager">
            The configuration manager to use.
            </param>
        </member>
        <member name="M:formulate.app.Resolvers.Configuration.SetConfigurationManager(formulate.app.Managers.IConfigurationManager)">
            <summary>
            Sets the configuration manager.
            </summary>
            <param name="manager">
            The new configuration manager.
            </param>
        </member>
        <member name="T:formulate.app.Resolvers.DataValuePersistence">
            <summary>
            The resolver for the data value persistence manager.
            </summary>
        </member>
        <member name="P:formulate.app.Resolvers.DataValuePersistence.Manager">
            <summary>
            Gets the data value persistence manager.
            </summary>
        </member>
        <member name="M:formulate.app.Resolvers.DataValuePersistence.#ctor(formulate.app.Persistence.IDataValuePersistence)">
            <summary>
            Primary constructor.
            </summary>
            <param name="manager">
            The data value persistence manager to use.
            </param>
        </member>
        <member name="M:formulate.app.Resolvers.DataValuePersistence.SetDataValuePersistence(formulate.app.Persistence.IDataValuePersistence)">
            <summary>
            Sets the data value persistence manager.
            </summary>
            <param name="manager">
            The new data value persistence manager.
            </param>
        </member>
        <member name="T:formulate.app.Resolvers.EntityPersistence">
            <summary>
            The resolver for the entity persistence manager.
            </summary>
        </member>
        <member name="P:formulate.app.Resolvers.EntityPersistence.Manager">
            <summary>
            Gets the entity persistence manager.
            </summary>
        </member>
        <member name="M:formulate.app.Resolvers.EntityPersistence.#ctor(formulate.app.Persistence.IEntityPersistence)">
            <summary>
            Primary constructor.
            </summary>
            <param name="manager">
            The entity persistence manager to use.
            </param>
        </member>
        <member name="M:formulate.app.Resolvers.EntityPersistence.SetEntityPersistence(formulate.app.Persistence.IEntityPersistence)">
            <summary>
            Sets the entity persistence manager.
            </summary>
            <param name="manager">
            The new entity persistence manager.
            </param>
        </member>
        <member name="T:formulate.app.Resolvers.FolderPersistence">
            <summary>
            The resolver for the folder persistence manager.
            </summary>
        </member>
        <member name="P:formulate.app.Resolvers.FolderPersistence.Manager">
            <summary>
            Gets the folder persistence manager.
            </summary>
        </member>
        <member name="M:formulate.app.Resolvers.FolderPersistence.#ctor(formulate.app.Persistence.IFolderPersistence)">
            <summary>
            Primary constructor.
            </summary>
            <param name="manager">
            The folder persistence manager to use.
            </param>
        </member>
        <member name="M:formulate.app.Resolvers.FolderPersistence.SetFolderPersistence(formulate.app.Persistence.IFolderPersistence)">
            <summary>
            Sets the folder persistence manager.
            </summary>
            <param name="manager">
            The new folder persistence manager.
            </param>
        </member>
        <member name="T:formulate.app.Resolvers.FormPersistence">
            <summary>
            The resolver for the form persistence manager.
            </summary>
        </member>
        <member name="P:formulate.app.Resolvers.FormPersistence.Manager">
            <summary>
            Gets the form persistence manager.
            </summary>
        </member>
        <member name="M:formulate.app.Resolvers.FormPersistence.#ctor(formulate.app.Persistence.IFormPersistence)">
            <summary>
            Primary constructor.
            </summary>
            <param name="manager">
            The form persistence manager to use.
            </param>
        </member>
        <member name="M:formulate.app.Resolvers.FormPersistence.SetFormPersistence(formulate.app.Persistence.IFormPersistence)">
            <summary>
            Sets the form persistence manager.
            </summary>
            <param name="manager">
            The new form persistence manager.
            </param>
        </member>
        <member name="T:formulate.app.Resolvers.ConfiguredFormPersistence">
            <summary>
            The resolver for the configured form persistence manager.
            </summary>
        </member>
        <member name="P:formulate.app.Resolvers.ConfiguredFormPersistence.Manager">
            <summary>
            Gets the configured form persistence manager.
            </summary>
        </member>
        <member name="M:formulate.app.Resolvers.ConfiguredFormPersistence.#ctor(formulate.app.Persistence.IConfiguredFormPersistence)">
            <summary>
            Primary constructor.
            </summary>
            <param name="manager">
            The configured form persistence manager to use.
            </param>
        </member>
        <member name="M:formulate.app.Resolvers.ConfiguredFormPersistence.SetConfiguredFormPersistence(formulate.app.Persistence.IConfiguredFormPersistence)">
            <summary>
            Sets the configured form persistence manager.
            </summary>
            <param name="manager">
            The new configured form persistence manager.
            </param>
        </member>
        <member name="T:formulate.app.Resolvers.ValidationPersistence">
            <summary>
            The resolver for the validation persistence manager.
            </summary>
        </member>
        <member name="P:formulate.app.Resolvers.ValidationPersistence.Manager">
            <summary>
            Gets the validation persistence manager.
            </summary>
        </member>
        <member name="M:formulate.app.Resolvers.ValidationPersistence.#ctor(formulate.app.Persistence.IValidationPersistence)">
            <summary>
            Primary constructor.
            </summary>
            <param name="manager">
            The validation persistence manager to use.
            </param>
        </member>
        <member name="M:formulate.app.Resolvers.ValidationPersistence.SetValidationPersistence(formulate.app.Persistence.IValidationPersistence)">
            <summary>
            Sets the validation persistence manager.
            </summary>
            <param name="manager">
            The new validation persistence manager.
            </param>
        </member>
        <member name="T:formulate.app.Resolvers.LayoutPersistence">
            <summary>
            The resolver for the layout persistence manager.
            </summary>
        </member>
        <member name="P:formulate.app.Resolvers.LayoutPersistence.Manager">
            <summary>
            Gets the layout persistence manager.
            </summary>
        </member>
        <member name="M:formulate.app.Resolvers.LayoutPersistence.#ctor(formulate.app.Persistence.ILayoutPersistence)">
            <summary>
            Primary constructor.
            </summary>
            <param name="manager">
            The layout persistence manager to use.
            </param>
        </member>
        <member name="M:formulate.app.Resolvers.LayoutPersistence.SetLayoutPersistence(formulate.app.Persistence.ILayoutPersistence)">
            <summary>
            Sets the layout persistence manager.
            </summary>
            <param name="manager">
            The new layout persistence manager.
            </param>
        </member>
        <member name="T:formulate.app.Serialization.FieldsJsonConverter">
            <summary>
            Handles conversion of JSON to IFormField[].
            </summary>
            <remarks>
            This conversion is necessary to instantiate concrete instances
            of the IFormField interface. By avoiding embedding the full
            type name in the JSON, we can refactor names of classes without
            preventing deserialization later.
            </remarks>
        </member>
        <member name="M:formulate.app.Serialization.FieldsJsonConverter.CanConvert(System.Type)">
            <summary>
            Indicates whether or not this class can convert an object
            of the specified type.
            </summary>
        </member>
        <member name="P:formulate.app.Serialization.FieldsJsonConverter.CanWrite">
            <summary>
            This class does not handle serialization.
            </summary>
        </member>
        <member name="P:formulate.app.Serialization.FieldsJsonConverter.CanRead">
            <summary>
            This class does handle deserialization.
            </summary>
        </member>
        <member name="M:formulate.app.Serialization.FieldsJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Deserializes JSON into an array of IFormField.
            </summary>
            <returns>
            An array of IFormField.
            </returns>
        </member>
        <member name="M:formulate.app.Serialization.FieldsJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            This does nothing (it must be implemented because it is
            abstract in the base class).
            </summary>
        </member>
        <member name="M:formulate.app.Serialization.FieldsJsonConverter.InstantiateFieldByTypeId(System.Guid)">
            <summary>
            Creates a new instance of a form field by the field's
            type ID.
            </summary>
            <param name="typeId">
            The form field type ID.
            </param>
            <returns>
            An instance of a form field.
            </returns>
        </member>
        <member name="T:formulate.app.Serialization.HandlersJsonConverter">
            <summary>
            Handles conversion of JSON to IFormHandler[].
            </summary>
            <remarks>
            This conversion is necessary to instantiate concrete instances
            of the IFormHandler interface. By avoiding embedding the full
            type name in the JSON, we can refactor names of classes without
            preventing deserialization later.
            </remarks>
        </member>
        <member name="M:formulate.app.Serialization.HandlersJsonConverter.CanConvert(System.Type)">
            <summary>
            Indicates whether or not this class can convert an object
            of the specified type.
            </summary>
        </member>
        <member name="P:formulate.app.Serialization.HandlersJsonConverter.CanWrite">
            <summary>
            This class does not handle serialization.
            </summary>
        </member>
        <member name="P:formulate.app.Serialization.HandlersJsonConverter.CanRead">
            <summary>
            This class does handle deserialization.
            </summary>
        </member>
        <member name="M:formulate.app.Serialization.HandlersJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Deserializes JSON into an array of IFormHandler.
            </summary>
            <returns>
            An array of IFormHandler.
            </returns>
        </member>
        <member name="M:formulate.app.Serialization.HandlersJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            This does nothing (it must be implemented because it is
            abstract in the base class).
            </summary>
        </member>
        <member name="M:formulate.app.Serialization.HandlersJsonConverter.InstantiateHandlerByTypeId(System.Guid)">
            <summary>
            Creates a new instance of a form handler by the handler's
            type ID.
            </summary>
            <param name="typeId">
            The form handler type ID.
            </param>
            <returns>
            An instance of a form handler.
            </returns>
        </member>
        <member name="T:formulate.app.Templates.Template">
            <summary>
            A template (i.e., a CSHTML view).
            </summary>
        </member>
        <member name="T:formulate.app.Trees.Helpers.DataValueHelper">
            <summary>
            Helps with data values in the Formulate tree.
            </summary>
        </member>
        <member name="P:formulate.app.Trees.Helpers.DataValueHelper.Tree">
            <summary>
            The tree controller.
            </summary>
        </member>
        <member name="P:formulate.app.Trees.Helpers.DataValueHelper.Helper">
            <summary>
            The folder helper.
            </summary>
        </member>
        <member name="M:formulate.app.Trees.Helpers.DataValueHelper.#ctor(Umbraco.Web.Trees.TreeController,formulate.app.Trees.Helpers.FolderHelper)">
            <summary>
            Primary constructor.
            </summary>
            <param name="tree">
            The tree controller.
            </param>
            <param name="helper">
            The folder helper.
            </param>
        </member>
        <member name="M:formulate.app.Trees.Helpers.DataValueHelper.AddChildrenToTree(Umbraco.Web.Models.Trees.TreeNodeCollection,System.Net.Http.Formatting.FormDataCollection,System.Collections.Generic.IEnumerable{formulate.app.Entities.IEntity})">
            <summary>
            Adds the specified data value entities (data value or folder)
            to the tree.
            </summary>
            <param name="nodes">
            The collection to add the nodes to.
            </param>
            <param name="queryStrings">The query strings.</param>
            <param name="entities">
            The entities (data values and folders) to add to the tree.
            </param>
        </member>
        <member name="M:formulate.app.Trees.Helpers.DataValueHelper.AddToTree(Umbraco.Web.Models.Trees.TreeNodeCollection,System.Net.Http.Formatting.FormDataCollection,formulate.app.DataValues.DataValue)">
            <summary>
            Adds a data value node to the tree.
            </summary>
            <param name="nodes">
            The node collection to add the data value to.
            </param>
            <param name="queryStrings">The query strings.</param>
            <param name="dataValue">The data value to add.</param>
        </member>
        <member name="M:formulate.app.Trees.Helpers.DataValueHelper.AddDeleteAction(Umbraco.Web.Models.Trees.MenuItemCollection)">
            <summary>
            Adds the "Delete Data Value" action to the data value node.
            </summary>
            <param name="menu">
            The menu to add the action to.
            </param>
        </member>
        <member name="M:formulate.app.Trees.Helpers.DataValueHelper.AddMoveDataValueAction(Umbraco.Web.Models.Trees.MenuItemCollection,formulate.app.DataValues.DataValue)">
            <summary>
            Adds the "Move" action to the menu.
            </summary>
            <param name="menu">
            The menu items to add the action to.
            </param>
            <param name="dataValue">
            The data value.
            </param>
        </member>
        <member name="M:formulate.app.Trees.Helpers.DataValueHelper.AddCreateAction(Umbraco.Web.Models.Trees.MenuItemCollection,System.Nullable{System.Guid})">
            <summary>
            Adds the "Create Data Value" action with the specified ID used
            as the parent for the data value that is created.
            </summary>
            <param name="menu">
            The menu to add the action to.
            </param>
            <param name="entityId">
            The ID of the entity to create the data value under.
            If null, the data value will be created at the root.
            </param>
        </member>
        <member name="T:formulate.app.Trees.Helpers.FolderHelper">
            <summary>
            Helps with folders in the Formulate tree.
            </summary>
        </member>
        <member name="P:formulate.app.Trees.Helpers.FolderHelper.Persistence">
            <summary>
            The entity persistence.
            </summary>
        </member>
        <member name="P:formulate.app.Trees.Helpers.FolderHelper.Tree">
            <summary>
            The tree controller.
            </summary>
        </member>
        <member name="M:formulate.app.Trees.Helpers.FolderHelper.#ctor(formulate.app.Persistence.IEntityPersistence,Umbraco.Web.Trees.TreeController)">
            <summary>
            Primary constructor.
            </summary>
            <param name="persistence">
            The entity persistence.
            </param>
            <param name="tree">
            The tree controller.
            </param>
        </member>
        <member name="M:formulate.app.Trees.Helpers.FolderHelper.AddFolderToTree(Umbraco.Web.Models.Trees.TreeNodeCollection,System.Net.Http.Formatting.FormDataCollection,formulate.app.Folders.Folder,System.String)">
            <summary>
            Adds a folder node to the tree.
            </summary>
            <param name="nodes">The tree nodes to add to.</param>
            <param name="queryStrings">The query string.</param>
            <param name="folder">The folder.</param>
            <param name="icon">The folder's icon.</param>
        </member>
        <member name="M:formulate.app.Trees.Helpers.FolderHelper.AddCreateFolderAction(Umbraco.Web.Models.Trees.MenuItemCollection)">
            <summary>
            Adds the "Create Folder" action to the folder's menu.
            </summary>
            <param name="menu">
            The menu items.
            </param>
        </member>
        <member name="M:formulate.app.Trees.Helpers.FolderHelper.AddMoveFolderAction(Umbraco.Web.Models.Trees.MenuItemCollection,formulate.app.Folders.Folder)">
            <summary>
            Adds the "Move" action to the menu.
            </summary>
            <param name="menu">
            The menu items to add the action to.
            </param>
            <param name="folder">
            The folder.
            </param>
        </member>
        <member name="M:formulate.app.Trees.Helpers.FolderHelper.AddDeleteFolderAction(Umbraco.Web.Models.Trees.MenuItemCollection)">
            <summary>
            Adds the "Delete Form" action to the menu.
            </summary>
            <param name="menu">
            The menu items to add the action to.
            </param>
        </member>
        <member name="T:formulate.app.Trees.Helpers.FormHelper">
            <summary>
            Helps with forms in the Formulate tree.
            </summary>
        </member>
        <member name="P:formulate.app.Trees.Helpers.FormHelper.Persistence">
            <summary>
            The entity persistence.
            </summary>
        </member>
        <member name="P:formulate.app.Trees.Helpers.FormHelper.Tree">
            <summary>
            The tree controller.
            </summary>
        </member>
        <member name="P:formulate.app.Trees.Helpers.FormHelper.Helper">
            <summary>
            The folder helper.
            </summary>
        </member>
        <member name="M:formulate.app.Trees.Helpers.FormHelper.#ctor(formulate.app.Persistence.IEntityPersistence,Umbraco.Web.Trees.TreeController,formulate.app.Trees.Helpers.FolderHelper)">
            <summary>
            Primary constructor.
            </summary>
            <param name="persistence">
            The entity persistence.
            </param>
            <param name="tree">
            The tree controller.
            </param>
            <param name="helper">
            The folder helper.
            </param>
        </member>
        <member name="M:formulate.app.Trees.Helpers.FormHelper.AddFormChildrenToTree(Umbraco.Web.Models.Trees.TreeNodeCollection,System.Net.Http.Formatting.FormDataCollection,System.Collections.Generic.IEnumerable{formulate.app.Entities.IEntity})">
            <summary>
            Adds the specified form entities (form or folder) to
            the tree.
            </summary>
            <param name="nodes">
            The collection to add the nodes to.
            </param>
            <param name="queryStrings">The query strings.</param>
            <param name="entities">
            The entities (forms and folders) to add to the tree.
            </param>
        </member>
        <member name="M:formulate.app.Trees.Helpers.FormHelper.AddFormToTree(Umbraco.Web.Models.Trees.TreeNodeCollection,System.Net.Http.Formatting.FormDataCollection,formulate.app.Forms.Form)">
            <summary>
            Adds a form node to the tree.
            </summary>
            <param name="nodes">
            The node collection to add the form to.
            </param>
            <param name="queryStrings">The query strings.</param>
            <param name="form">The form to add.</param>
        </member>
        <member name="M:formulate.app.Trees.Helpers.FormHelper.AddDeleteFormAction(Umbraco.Web.Models.Trees.MenuItemCollection)">
            <summary>
            Adds the "Delete Form" action to the menu.
            </summary>
            <param name="menu">
            The menu items to add the action to.
            </param>
        </member>
        <member name="M:formulate.app.Trees.Helpers.FormHelper.AddMoveFormAction(Umbraco.Web.Models.Trees.MenuItemCollection,formulate.app.Forms.Form)">
            <summary>
            Adds the "Move" action to the menu.
            </summary>
            <param name="menu">
            The menu items to add the action to.
            </param>
            <param name="form">
            The form.
            </param>
        </member>
        <member name="M:formulate.app.Trees.Helpers.FormHelper.AddCreateFormAction(Umbraco.Web.Models.Trees.MenuItemCollection,System.Nullable{System.Guid})">
            <summary>
            Adds the "Create Form" action with the specified ID used
            as the parent for the form that is created.
            </summary>
            <param name="menu">
            The menu to add the action to.
            </param>
            <param name="entityId">
            The ID of the entity to create the form under.
            If null, the form will be created at the root.
            </param>
        </member>
        <member name="T:formulate.app.Trees.Helpers.ConfiguredFormHelper">
            <summary>
            Helps with configured forms in the Formulate tree.
            </summary>
        </member>
        <member name="P:formulate.app.Trees.Helpers.ConfiguredFormHelper.Tree">
            <summary>
            The tree controller.
            </summary>
        </member>
        <member name="M:formulate.app.Trees.Helpers.ConfiguredFormHelper.#ctor(Umbraco.Web.Trees.TreeController)">
            <summary>
            Primary constructor.
            </summary>
            <param name="tree">
            The tree controller.
            </param>
            <param name="helper">
            The folder helper.
            </param>
        </member>
        <member name="M:formulate.app.Trees.Helpers.ConfiguredFormHelper.AddConfiguredFormChildrenToTree(Umbraco.Web.Models.Trees.TreeNodeCollection,System.Net.Http.Formatting.FormDataCollection,System.Collections.Generic.IEnumerable{formulate.app.Entities.IEntity})">
            <summary>
            Adds the specified configured form entities to the tree.
            </summary>
            <param name="nodes">
            The collection to add the nodes to.
            </param>
            <param name="queryStrings">The query strings.</param>
            <param name="entities">
            The entities to add to the tree.
            </param>
        </member>
        <member name="M:formulate.app.Trees.Helpers.ConfiguredFormHelper.AddConfiguredFormToTree(Umbraco.Web.Models.Trees.TreeNodeCollection,System.Net.Http.Formatting.FormDataCollection,formulate.app.Forms.ConfiguredForm)">
            <summary>
            Adds a configured form node to the tree.
            </summary>
            <param name="nodes">
            The node collection to add the configured form to.
            </param>
            <param name="queryStrings">The query strings.</param>
            <param name="configuredForm">The configured form to add.</param>
        </member>
        <member name="M:formulate.app.Trees.Helpers.ConfiguredFormHelper.AddDeleteAction(Umbraco.Web.Models.Trees.MenuItemCollection)">
            <summary>
            Adds the "Delete Configured Form" action to the configured form node.
            </summary>
            <param name="menu">
            The menu to add the action to.
            </param>
        </member>
        <member name="M:formulate.app.Trees.Helpers.ConfiguredFormHelper.AddCreateConfiguredFormAction(Umbraco.Web.Models.Trees.MenuItemCollection,System.Guid)">
            <summary>
            Adds the "Create Configuration" action with the specified ID used
            as the parent for the configured form that is created.
            </summary>
            <param name="menu">
            The menu to add the action to.
            </param>
            <param name="entityId">
            The ID of the entity to create the configured form under.
            </param>
        </member>
        <member name="T:formulate.app.Trees.Helpers.ValidationHelper">
            <summary>
            Helps with validations in the Formulate tree.
            </summary>
        </member>
        <member name="P:formulate.app.Trees.Helpers.ValidationHelper.Tree">
            <summary>
            The tree controller.
            </summary>
        </member>
        <member name="P:formulate.app.Trees.Helpers.ValidationHelper.Helper">
            <summary>
            The folder helper.
            </summary>
        </member>
        <member name="M:formulate.app.Trees.Helpers.ValidationHelper.#ctor(Umbraco.Web.Trees.TreeController,formulate.app.Trees.Helpers.FolderHelper)">
            <summary>
            Primary constructor.
            </summary>
            <param name="tree">
            The tree controller.
            </param>
            <param name="helper">
            The folder helper.
            </param>
        </member>
        <member name="M:formulate.app.Trees.Helpers.ValidationHelper.AddValidationChildrenToTree(Umbraco.Web.Models.Trees.TreeNodeCollection,System.Net.Http.Formatting.FormDataCollection,System.Collections.Generic.IEnumerable{formulate.app.Entities.IEntity})">
            <summary>
            Adds the specified validation entities (validation or folder)
            to the tree.
            </summary>
            <param name="nodes">
            The collection to add the nodes to.
            </param>
            <param name="queryStrings">The query strings.</param>
            <param name="entities">
            The entities (validations and folders) to add to the tree.
            </param>
        </member>
        <member name="M:formulate.app.Trees.Helpers.ValidationHelper.AddValidationToTree(Umbraco.Web.Models.Trees.TreeNodeCollection,System.Net.Http.Formatting.FormDataCollection,formulate.app.Validations.Validation)">
            <summary>
            Adds a validation node to the tree.
            </summary>
            <param name="nodes">
            The node collection to add the validation to.
            </param>
            <param name="queryStrings">The query strings.</param>
            <param name="validation">The validation to add.</param>
        </member>
        <member name="M:formulate.app.Trees.Helpers.ValidationHelper.AddDeleteValidationAction(Umbraco.Web.Models.Trees.MenuItemCollection)">
            <summary>
            Adds the "Delete Validation" action to the validation node.
            </summary>
            <param name="menu">
            The menu to add the action to.
            </param>
        </member>
        <member name="M:formulate.app.Trees.Helpers.ValidationHelper.AddMoveValidationAction(Umbraco.Web.Models.Trees.MenuItemCollection,formulate.app.Validations.Validation)">
            <summary>
            Adds the "Move" action to the menu.
            </summary>
            <param name="menu">
            The menu items to add the action to.
            </param>
            <param name="validation">
            The validation.
            </param>
        </member>
        <member name="M:formulate.app.Trees.Helpers.ValidationHelper.AddCreateValidationAction(Umbraco.Web.Models.Trees.MenuItemCollection,System.Nullable{System.Guid})">
            <summary>
            Adds the "Create Validation" action with the specified ID used
            as the parent for the validation that is created.
            </summary>
            <param name="menu">
            The menu to add the action to.
            </param>
            <param name="entityId">
            The ID of the entity to create the validation under.
            If null, the validation will be created at the root.
            </param>
        </member>
        <member name="T:formulate.app.Trees.Helpers.LayoutHelper">
            <summary>
            Helps with layouts in the Formulate tree.
            </summary>
        </member>
        <member name="P:formulate.app.Trees.Helpers.LayoutHelper.Tree">
            <summary>
            The tree controller.
            </summary>
        </member>
        <member name="P:formulate.app.Trees.Helpers.LayoutHelper.Helper">
            <summary>
            The folder helper.
            </summary>
        </member>
        <member name="M:formulate.app.Trees.Helpers.LayoutHelper.#ctor(Umbraco.Web.Trees.TreeController,formulate.app.Trees.Helpers.FolderHelper)">
            <summary>
            Primary constructor.
            </summary>
            <param name="tree">
            The tree controller.
            </param>
            <param name="helper">
            The folder helper.
            </param>
        </member>
        <member name="M:formulate.app.Trees.Helpers.LayoutHelper.AddLayoutChildrenToTree(Umbraco.Web.Models.Trees.TreeNodeCollection,System.Net.Http.Formatting.FormDataCollection,System.Collections.Generic.IEnumerable{formulate.app.Entities.IEntity})">
            <summary>
            Adds the specified layout entities (layout or folder) to
            the tree.
            </summary>
            <param name="nodes">
            The collection to add the nodes to.
            </param>
            <param name="queryStrings">The query strings.</param>
            <param name="entities">
            The entities (layouts and folders) to add to the tree.
            </param>
        </member>
        <member name="M:formulate.app.Trees.Helpers.LayoutHelper.AddLayoutToTree(Umbraco.Web.Models.Trees.TreeNodeCollection,System.Net.Http.Formatting.FormDataCollection,formulate.app.Layouts.Layout)">
            <summary>
            Adds a layout node to the tree.
            </summary>
            <param name="nodes">
            The node collection to add the layout to.
            </param>
            <param name="queryStrings">The query strings.</param>
            <param name="layout">The layout to add.</param>
        </member>
        <member name="M:formulate.app.Trees.Helpers.LayoutHelper.AddDeleteLayoutAction(Umbraco.Web.Models.Trees.MenuItemCollection)">
            <summary>
            Adds the "Delete Layout" action to the layout node.
            </summary>
            <param name="menu">
            The menu to add the action to.
            </param>
        </member>
        <member name="M:formulate.app.Trees.Helpers.LayoutHelper.AddMoveLayoutAction(Umbraco.Web.Models.Trees.MenuItemCollection,formulate.app.Layouts.Layout)">
            <summary>
            Adds the "Move" action to the menu.
            </summary>
            <param name="menu">
            The menu items to add the action to.
            </param>
            <param name="layout">
            The layout.
            </param>
        </member>
        <member name="M:formulate.app.Trees.Helpers.LayoutHelper.AddCreateLayoutAction(Umbraco.Web.Models.Trees.MenuItemCollection,System.Nullable{System.Guid})">
            <summary>
            Adds the "Create Layout" action with the specified ID used
            as the parent for the layout that is created.
            </summary>
            <param name="menu">
            The menu to add the action to.
            </param>
            <param name="entityId">
            The ID of the entity to create the layout under.
            If null, the layout will be created at the root.
            </param>
        </member>
        <member name="T:formulate.app.Types.ConfiguredFormInfo">
            <summary>
            Information about a configured form.
            </summary>
        </member>
        <member name="P:formulate.app.Types.ConfiguredFormInfo.Configuration">
            <summary>
            The ID of the configured form.
            </summary>
        </member>
        <member name="P:formulate.app.Types.ConfiguredFormInfo.FormId">
            <summary>
            The ID of the form.
            </summary>
        </member>
        <member name="P:formulate.app.Types.ConfiguredFormInfo.LayoutId">
            <summary>
            The ID of the layout.
            </summary>
        </member>
        <member name="P:formulate.app.Types.ConfiguredFormInfo.TemplateId">
            <summary>
            The ID of the template.
            </summary>
        </member>
        <member name="T:formulate.app.Validations.IValidationKind">
            <summary>
            Classes that implement this are the kinds of validations that
            can be created.
            </summary>
        </member>
        <member name="T:formulate.app.Validations.Kinds.Mandatory.ValidationMandatory">
            <summary>
            A validation kind that makes a field mandatory.
            </summary>
        </member>
        <member name="P:formulate.app.Validations.Kinds.Mandatory.ValidationMandatory.Id">
            <summary>
            The kind ID.
            </summary>
        </member>
        <member name="P:formulate.app.Validations.Kinds.Mandatory.ValidationMandatory.Name">
            <summary>
            The kind name.
            </summary>
        </member>
        <member name="P:formulate.app.Validations.Kinds.Mandatory.ValidationMandatory.Directive">
            <summary>
            The kind directive.
            </summary>
        </member>
        <member name="M:formulate.app.Validations.Kinds.Mandatory.ValidationMandatory.DeserializeConfiguration(System.String,formulate.app.Validations.ValidationContext)">
            <summary>
            Deserializes the validation configuration.
            </summary>
            <param name="configuration">
            The serialized validation configuration.
            </param>
            <param name="context">
            The validation configuration deserialization context.
            </param>
            <returns>
            The deserialized configuration.
            </returns>
        </member>
        <member name="T:formulate.app.Validations.Kinds.Mandatory.ValidationMandatoryConfiguration">
            <summary>
            Configuration for a mandatory validation.
            </summary>
        </member>
        <member name="P:formulate.app.Validations.Kinds.Mandatory.ValidationMandatoryConfiguration.Message">
            <summary>
            The error message to show when the validation fails.
            </summary>
        </member>
        <member name="T:formulate.app.Validations.Kinds.Regex.ValidationRegex">
            <summary>
            A validation kind that validates against a regular expression.
            </summary>
        </member>
        <member name="P:formulate.app.Validations.Kinds.Regex.ValidationRegex.Id">
            <summary>
            The kind ID.
            </summary>
        </member>
        <member name="P:formulate.app.Validations.Kinds.Regex.ValidationRegex.Name">
            <summary>
            The kind name.
            </summary>
        </member>
        <member name="P:formulate.app.Validations.Kinds.Regex.ValidationRegex.Directive">
            <summary>
            The kind directive.
            </summary>
        </member>
        <member name="M:formulate.app.Validations.Kinds.Regex.ValidationRegex.DeserializeConfiguration(System.String,formulate.app.Validations.ValidationContext)">
            <summary>
            Deserializes the validation configuration.
            </summary>
            <param name="configuration">
            The serialized validation configuration.
            </param>
            <param name="context">
            The validation configuration deserialization context.
            </param>
            <returns>
            The deserialized configuration.
            </returns>
        </member>
        <member name="T:formulate.app.Validations.Kinds.Regex.ValidationRegexConfiguration">
            <summary>
            Configuration for a regex validation.
            </summary>
        </member>
        <member name="P:formulate.app.Validations.Kinds.Regex.ValidationRegexConfiguration.Pattern">
            <summary>
            The regular expression pattern.
            </summary>
        </member>
        <member name="P:formulate.app.Validations.Kinds.Regex.ValidationRegexConfiguration.Message">
            <summary>
            The error message to show when the validation fails.
            </summary>
        </member>
        <member name="T:formulate.app.Validations.Validation">
            <summary>
            Validates a form field.
            </summary>
        </member>
        <member name="P:formulate.app.Validations.Validation.KindId">
            <summary>
            The ID of the validation kind.
            </summary>
        </member>
        <member name="P:formulate.app.Validations.Validation.Id">
            <summary>
            The ID of this validation.
            </summary>
        </member>
        <member name="P:formulate.app.Validations.Validation.Path">
            <summary>
            The entity ID path of this validation.
            </summary>
        </member>
        <member name="P:formulate.app.Validations.Validation.Alias">
            <summary>
            The alias of this validation.
            </summary>
        </member>
        <member name="P:formulate.app.Validations.Validation.Name">
            <summary>
            The name of this validation.
            </summary>
        </member>
        <member name="P:formulate.app.Validations.Validation.Icon">
            <summary>
            The icon for validations.
            </summary>
        </member>
        <member name="P:formulate.app.Validations.Validation.Kind">
            <summary>
            The kind of this entity.
            </summary>
        </member>
        <member name="P:formulate.app.Validations.Validation.Data">
            <summary>
            The data stored by this validation.
            </summary>
        </member>
        <member name="M:formulate.app.Validations.Validation.DeserializeConfiguration(formulate.app.Validations.ValidationContext)">
            <summary>
            Deserializes the configuration data into a C# class instance.
            </summary>
            <param name="context">
            The validation configuration deserialization context.
            </param>
            <returns>
            The deserialized configuration data.
            </returns>
        </member>
        <member name="M:formulate.app.Validations.Validation.GetValidationKind">
            <summary>
            Returns the validation kind.
            </summary>
            <returns>
            The kind of validation.
            </returns>
        </member>
        <member name="T:formulate.app.Validations.ValidationContext">
            <summary>
            Contextual information to be used while deserializing a validation configuration.
            </summary>
        </member>
    </members>
</doc>
