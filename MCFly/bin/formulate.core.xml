<?xml version="1.0"?>
<doc>
    <assembly>
        <name>formulate.core</name>
    </assembly>
    <members>
        <member name="T:formulate.core.Constants.Settings">
            <summary>
            Constants related to settings.
            </summary>
        </member>
        <member name="T:formulate.core.Exceptions.ViewNotFoundException">
            <summary>
            An exception to be used when a view is not found.
            </summary>
        </member>
        <member name="P:formulate.core.Exceptions.ViewNotFoundException.ViewPath">
            <summary>
            The path to the view that was not found.
            </summary>
        </member>
        <member name="M:formulate.core.Exceptions.ViewNotFoundException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:formulate.core.Exceptions.ViewNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Primary constructor.
            </summary>
            <param name="message">The error message.</param>
            <param name="viewPath">The path to the view that was not found.</param>
        </member>
        <member name="T:formulate.core.Extensions.CollectionExtensions">
            <summary>
            Extension methods for collections.
            </summary>
        </member>
        <member name="M:formulate.core.Extensions.CollectionExtensions.MakeSafe``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts a null collection into an empty collection.
            </summary>
            <typeparam name="T">The type of item stored by the collection.</typeparam>
            <param name="items">The collection of items.</param>
            <returns>
            An empty list, if the supplied collection is null; otherwise, the supplied collection.
            </returns>
        </member>
        <member name="M:formulate.core.Extensions.CollectionExtensions.WithoutNulls``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the collection of items without nulls.
            </summary>
            <typeparam name="T">The type of item stored by the collection.</typeparam>
            <param name="items">The collection of items.</param>
            <returns>
            The collection without any empty items.
            </returns>
        </member>
        <member name="M:formulate.core.Extensions.CollectionExtensions.OrderByCollection``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Sorts a collection by the order of the items in another collection.
            </summary>
            <typeparam name="T">
            The type of item in each ceollection.
            </typeparam>
            <param name="items">
            The items to sort.
            </param>
            <param name="orderCollection">
            The collection to order by.
            </param>
            <returns>
            The sorted collection.
            </returns>
            <remarks>
            If the collection to order by is missing an item, the original order will be used as
            a fallback.
            </remarks>
        </member>
        <member name="T:formulate.core.Extensions.StringExtensions">
            <summary>
            Extension methods for strings.
            </summary>
        </member>
        <member name="M:formulate.core.Extensions.StringExtensions.Fallback(System.String,System.String)">
            <summary>
            Uses a fallback string if the specified source string
            is null or whitespace.
            </summary>
            <param name="source">The source string.</param>
            <param name="fallback">The fallback string.</param>
            <returns>
            The original string, or the fallback string.
            </returns>
        </member>
        <member name="M:formulate.core.Extensions.StringExtensions.ConvertFieldTypeToAngularType(System.String)">
            <summary>
            Converts a field type (e.g., "TextField") to an Angular-friendly type (e.g., "text").
            </summary>
            <param name="fieldType">
            The field type (e.g., "TextField").
            </param>
            <returns>
            The Angular-friendly type (e.g., "text").
            </returns>
        </member>
        <member name="M:formulate.core.Extensions.StringExtensions.ConvertValidationTypeToAngularType(System.String)">
            <summary>
            Converts a validation type (e.g., "ValidationRegex") to an
            Angular-friendly type (e.g., "regex").
            </summary>
            <param name="validationType">
            The validation type (e.g., "ValidationRegex").
            </param>
            <returns>
            The Angular-friendly type (e.g., "regex").
            </returns>
        </member>
        <member name="T:formulate.core.Models.FormViewModel">
            <summary>
            The view model that contains everything necessary to render a form.
            </summary>
        </member>
        <member name="T:formulate.core.Types.SubmissionOptions">
            <summary>
            Options for a form submission.
            </summary>
        </member>
        <member name="P:formulate.core.Types.SubmissionOptions.Validate">
            <summary>
            Validate the form input?
            </summary>
        </member>
        <member name="T:formulate.core.Types.SubmissionResult">
            <summary>
            The result of a form submission.
            </summary>
        </member>
        <member name="T:formulate.core.Utilities.FileUtility">
            <summary>
            Assists with operations related to files.
            </summary>
        </member>
        <member name="M:formulate.core.Utilities.FileUtility.ValidateView(System.String)">
            <summary>
            Validates that a view at the specified path exists.
            </summary>
            <param name="path">
            The path (e.g., "~/Views/Partials/Formulate/SomeView.cshtml").
            </param>
            <remarks>
            An exception will be thrown if the view does not exist.
            </remarks>
        </member>
        <member name="T:formulate.core.Utilities.DateUtility">
            <summary>
            Helps with dates.
            </summary>
        </member>
        <member name="M:formulate.core.Utilities.DateUtility.AttemptParseDate(System.String)">
            <summary>
            Attempts to parse a string as a date.
            </summary>
            <param name="strDate">
            The string date.
            </param>
            <returns>
            The parsed date, or null.
            </returns>
        </member>
        <member name="T:formulate.core.Utilities.NumberUtility">
            <summary>
            Helps with numbers.
            </summary>
        </member>
        <member name="M:formulate.core.Utilities.NumberUtility.AttemptParseInt(System.String)">
            <summary>
            Attempts to parse a string as an integer.
            </summary>
            <param name="strInt">
            The string integer.
            </param>
            <returns>
            The parsed integer, or null.
            </returns>
        </member>
    </members>
</doc>
